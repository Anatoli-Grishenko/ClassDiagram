{
  "classtypes": [
    "appboot",
    "sessions",
    "data",
    "telegram",
    "tools",
    "crypto",
    "agents",
    "database",
    "swing",
    "world",
    "agswing",
    "larva",
    "games",
    "factoryagent",
    "geometry"
  ],
  "relationtypes": [
    "extends",
    "owns"
  ],
  "relation": {
    "extends": [
      {
        "LARVABaseTelegram": [
          "LARVAPublicTelegram",
          "LARVAPrivateTelegram"
        ]
      },
      {
        "OleDataBase": [
          "DBA2021",
          "DBA2122"
        ]
      },
      {
        "Entity": [
          "Thing"
        ]
      },
      {
        "JPanel": [
          "AGDrawPane",
          "MyDrawPane"
        ]
      },
      {
        "Agent": [
          "LARVABaseAgent"
        ]
      },
      {
        "SessionManager": [
          "TeamController",
          "Goku",
          "SonGoanda",
          "HWManager",
          "WorldController",
          "Mario"
        ]
      },
      {
        "MyDrawPane": [
          "MyMapPalPane",
          "LARVAEmbeddedDash",
          "AirTrafficControl"
        ]
      },
      {
        "LARVAFirstAgent": [
          "TradeFederation",
          "DeathStarDeLuxe",
          "DeathStar"
        ]
      },
      {
        "Ole": [
          "OleQuery",
          "OleTable",
          "OleFile",
          "OleSensor",
          "OleList",
          "OleDot",
          "OlePassport",
          "OleConfig",
          "OleReport"
        ]
      },
      {
        "JsonObject": [
          "Ole"
        ]
      },
      {
        "LARVADash": [
          "LARVACompactDash",
          "LARVAMiniDash"
        ]
      },
      {
        "LARVAAdminAgent": [
          "GMailer",
          "LARVAEphemeral",
          "LARVAQueen",
          "ProblemManager",
          "DataBaser",
          "LARVABaseTelegram",
          "DrDiagnostic",
          "IdentityManager"
        ]
      },
      {
        "TelegramLongPollingBot": [
          "LARVATelegramBot"
        ]
      },
      {
        "Object3D": [
          "Line3D",
          "Polygon3D",
          "Bitmap3D"
        ]
      },
      {
        "LARVABaseAgent": [
          "LARVAFirstAgent",
          "LARVAAdminAgent"
        ]
      },
      {
        "OlePassport": [
          "AdminPassport"
        ]
      },
      {
        "GameObject": [
          "GameLabel",
          "GameBitmap",
          "GameCharacter"
        ]
      },
      {
        "Cryptor": [
          "AdminCryptor"
        ]
      },
      {
        "LARVAEphemeral": [
          "StoreManager",
          "SessionManager"
        ]
      },
      {
        "ACLMessage": [
          "ADMINMessage"
        ]
      },
      {
        "AGDrawPane": [
          "AG3DDrawPane"
        ]
      },
      {
        "Thing": [
          "liveBot"
        ]
      }
    ],
    "owns": [
      {
        "Entity": [
          
        ]
      },
      {
        "OleQuery": [
          
        ]
      },
      {
        "GameLabel": [
          
        ]
      },
      {
        "Ole": [
          "Cryptor"
        ]
      },
      {
        "GMailer": [
          
        ]
      },
      {
        "TeamController": [
          "Ole"
        ]
      },
      {
        "MyPopup": [
          
        ]
      },
      {
        "Cryptor": [
          
        ]
      },
      {
        "LARVAEphemeral": [
          
        ]
      },
      {
        "Map2DColor": [
          
        ]
      },
      {
        "SentenceBuilder": [
          "OleDataBase"
        ]
      },
      {
        "Vector": [
          
        ]
      },
      {
        "Thing": [
          "Perceptor"
        ]
      },
      {
        "LARVAQueen": [
          "FactoryAgent"
        ]
      },
      {
        "Roles": [
          
        ]
      },
      {
        "LARVADash": [
          "MyDrawPane",
          "MyMapPalPane"
        ]
      },
      {
        "Compass": [
          
        ]
      },
      {
        "Line3D": [
          
        ]
      },
      {
        "Object3D": [
          
        ]
      },
      {
        "SequenceDiagram": [
          
        ]
      },
      {
        "FactoryAgent": [
          "LARVAAdminAgent"
        ]
      },
      {
        "Game": [
          "MyDrawPane"
        ]
      },
      {
        "MyMapPalPane": [
          "MyDrawPane"
        ]
      },
      {
        "ProblemManager": [
          "OleConfig"
        ]
      },
      {
        "TelegramMenuOption": [
          
        ]
      },
      {
        "TimeHandler": [
          
        ]
      },
      {
        "AGDrawPane": [
          
        ]
      },
      {
        "DataBaser": [
          
        ]
      },
      {
        "LARVABaseTelegram": [
          
        ]
      },
      {
        "MyDrawPane": [
          
        ]
      },
      {
        "LARVABoot": [
          "OleConfig"
        ]
      },
      {
        "AGFrame": [
          
        ]
      },
      {
        "Logger": [
          
        ]
      },
      {
        "GamePanel": [
          
        ]
      },
      {
        "LARVABaseAgent": [
          "OleFile"
        ]
      },
      {
        "capability": [
          
        ]
      },
      {
        "Goku": [
          
        ]
      },
      {
        "LARVAAirTrafficControlTiles": [
          "MyDrawPane",
          "AirTrafficControl",
          "LARVAEmbeddedDash",
          "OleFile"
        ]
      },
      {
        "LARVAPublicTelegram": [
          
        ]
      },
      {
        "LARVAPrivateTelegram": [
          
        ]
      },
      {
        "SonGoanda": [
          
        ]
      },
      {
        "HWManager": [
          
        ]
      },
      {
        "Menu": [
          
        ]
      },
      {
        "TradeFederation": [
          
        ]
      },
      {
        "TelegramChat": [
          
        ]
      },
      {
        "DBAAPI": [
          
        ]
      },
      {
        "emojis": [
          "OleList"
        ]
      },
      {
        "JDrawPane": [
          
        ]
      },
      {
        "MyPlainButton": [
          
        ]
      },
      {
        "Map2DGrayscale": [
          
        ]
      },
      {
        "OleTable": [
          
        ]
      },
      {
        "DrDiagnostic": [
          "OleConfig"
        ]
      },
      {
        "LARVATelegramBot": [
          "LARVAAdminAgent"
        ]
      },
      {
        "TelegramChoice": [
          
        ]
      },
      {
        "TelegramMenu": [
          
        ]
      },
      {
        "Keygen": [
          
        ]
      },
      {
        "DBA2021": [
          "Ole",
          "OleTable"
        ]
      },
      {
        "fileutils": [
          
        ]
      },
      {
        "Event": [
          
        ]
      },
      {
        "ProductCoin": [
          
        ]
      },
      {
        "LARVACompactDash": [
          
        ]
      },
      {
        "Transform": [
          
        ]
      },
      {
        "GameBitmap": [
          
        ]
      },
      {
        "DeathStarDeLuxe": [
          "LARVAMiniDash"
        ]
      },
      {
        "LARVAEmbeddedDash": [
          "MyDrawPane"
        ]
      },
      {
        "OleDialog": [
          
        ]
      },
      {
        "IdentityManager": [
          
        ]
      },
      {
        "WorldController": [
          "Ole"
        ]
      },
      {
        "LARVAMiniDash": [
          
        ]
      },
      {
        "LARVAFirstAgent": [
          "LARVADash",
          "OleList",
          "OleConfig"
        ]
      },
      {
        "Scene3D": [
          "Object3D"
        ]
      },
      {
        "JADEBoot": [
          "OleConfig"
        ]
      },
      {
        "Polygon3D": [
          
        ]
      },
      {
        "World": [
          "Thing",
          "OleConfig"
        ]
      },
      {
        "Basher": [
          
        ]
      },
      {
        "Mario": [
          
        ]
      },
      {
        "AdminPassport": [
          
        ]
      },
      {
        "AdminCryptor": [
          
        ]
      },
      {
        "ReportableObject": [
          
        ]
      },
      {
        "TelegramMenuBar": [
          
        ]
      },
      {
        "GameObject": [
          
        ]
      },
      {
        "GameCharacter": [
          
        ]
      },
      {
        "Bitmap3D": [
          
        ]
      },
      {
        "RoundProgressBar": [
          
        ]
      },
      {
        "Sentence": [
          
        ]
      },
      {
        "LARVA": [
          
        ]
      },
      {
        "DBAgent": [
          
        ]
      },
      {
        "OleFile": [
          
        ]
      },
      {
        "LARVAAdminAgent": [
          "FactoryAgent",
          "OleConfig",
          "DBA2122",
          "AdminCryptor",
          "OleList",
          "Ole"
        ]
      },
      {
        "DBA2122": [
          "Ole",
          "OleTable",
          "OleList"
        ]
      },
      {
        "ACLMessageTools": [
          
        ]
      },
      {
        "OleSensor": [
          
        ]
      },
      {
        "MyList": [
          
        ]
      },
      {
        "String3D": [
          
        ]
      },
      {
        "Internet": [
          
        ]
      },
      {
        "LARVAAirTrafficControl3D": [
          "AG3DDrawPane",
          "LARVAEmbeddedDash",
          "OleFile"
        ]
      },
      {
        "OleDataBase": [
          "Ole",
          "OleTable"
        ]
      },
      {
        "liveBot": [
          "Thing"
        ]
      },
      {
        "Palette": [
          
        ]
      },
      {
        "request": [
          
        ]
      },
      {
        "Ontology": [
          
        ]
      },
      {
        "LARVAFrame": [
          
        ]
      },
      {
        "TokenList": [
          
        ]
      },
      {
        "TelegramUpdates": [
          
        ]
      },
      {
        "OleList": [
          
        ]
      },
      {
        "Angular": [
          
        ]
      },
      {
        "OleDot": [
          
        ]
      },
      {
        "StoreManager": [
          
        ]
      },
      {
        "DeathStar": [
          "LARVAMiniDash"
        ]
      },
      {
        "OlePassport": [
          
        ]
      },
      {
        "Console": [
          
        ]
      },
      {
        "EmptyAgent": [
          
        ]
      },
      {
        "LARVADialog": [
          
        ]
      },
      {
        "direction": [
          
        ]
      },
      {
        "SwingTools": [
          
        ]
      },
      {
        "SensorDecoder": [
          
        ]
      },
      {
        "Sprite": [
          
        ]
      },
      {
        "AG3DDrawPane": [
          
        ]
      },
      {
        "SessionManager": [
          
        ]
      },
      {
        "Circle3D": [
          
        ]
      },
      {
        "Point": [
          
        ]
      },
      {
        "ADMINMessage": [
          "LARVAAdminAgent"
        ]
      },
      {
        "BehaviourControl": [
          
        ]
      },
      {
        "SendGMailSMTP": [
          
        ]
      },
      {
        "Map2DPalette": [
          
        ]
      },
      {
        "sensors": [
          
        ]
      },
      {
        "Map2DColor_OLD": [
          
        ]
      },
      {
        "Perceptor": [
          "Thing"
        ]
      },
      {
        "GameScene": [
          "GameObject"
        ]
      },
      {
        "AirTrafficControl": [
          "MyDrawPane"
        ]
      },
      {
        "OleConfig": [
          
        ]
      },
      {
        "OleReport": [
          
        ]
      },
      {
        "Session": [
          "DBA2122",
          "OleList",
          "Ole",
          "liveBot"
        ]
      }
    ]
  },
  "methods": {
    "Entity": [
      "    public String getName() {",
      "    public String getId() {",
      "    public final Entity setPosition(Point p) {",
      "   public Point getPosition() {",
      "    public final Entity setSize(Point p) {",
      "    public Point getSize() {",
      "    public int getDimension() {",
      "    private Entity setVectorTo(Point target) {",
      "    public Entity setOrientation(int orientation) {",
      "    public int getOrientation() {",
      "    public Vector getVector(){",
      "    public Entity move(Vector shift) {",
      "    public Entity moveForward(int units) {",
      "    public Entity moveUp(int units) {",
      "    public Entity moveDown(int units) {",
      "    private Entity RotateXY(double degrees) {",
      "    public static int rotateLeft(int sdirection) {",
      "    public static int rotateRight(int sdirection) {",
      "    public static int Opposite(int sdirection) {",
      "    public Entity rotateLeft() {",
      "    public Entity rotateRight() {",
      "    public boolean contains(Point p) {"
    ],
    "OleQuery": [
      "    public OleQuery(Ole o) {",
      "    private void InitQuery() {",
      "    public OleQuery Pair(String field, Object o) {",
      "    public OleQuery Condition(String field, String comp, Object o) {"
    ],
    "GameLabel": [
      "    public String getLabel() {",
      "    public void setLabel(String label) {",
      "    public Color getColor() {",
      "    public void setColor(Color c) {",
      "    public void showGameObject(GameScene gs) {"
    ],
    "Ole": [
      "    public static Ole Json2Ole(JsonObject jsole) {",
      "   protected static JsonValue Ole2JsonValue(JsonValue jsobject) {",
      "    public static JsonObject Ole2PlainJson(Ole odata) {",
      "    public static List<String> allNames(JsonObject jso) {",
      "    public Ole() {",
      "    public Ole(JsonObject jsole) {",
      "    public Ole(String s) {",
      "    protected JsonObject meta() {",
      "    public Ole clear() {",
      "    protected void Init() {",
      "    public boolean isOle() {",
      "    public boolean isEmpty() {",
      "    public Ole set(String s) {",
      "    public Ole fromJson(JsonObject jsole) {",
      "    protected Ole fromPlainJson(JsonObject jsole) {",
      "    protected Ole fromFullJson(JsonObject jsole) {",
      "    public JsonObject toPlainJson() {",
      "    public String toString(WriterConfig wcon) {",
      "    public String toString() {",
      "    public Ole parse(String s) {",
      "    public boolean checkField(String fieldName) {",
      "    public Ole addField(String fieldName) {",
      "    public Ole setID(String id) {",
      "    public Ole setType(String type) {",
      "    public Ole setDate(String date) {",
      "    public Ole setDescription(String description) {",
      "    public Ole setOle() {",
      "    public String getID() {",
      "    public String getType() {",
      "    public String getDate() {",
      "    public String getDescription() {",
      "    public List<String> getFieldList() {",
      "    public String getFieldType(String field) {",
      "    public String getValueType(JsonValue jsv) {",
      "    public final Ole getOle(String field) {",
      "    public Ole set(String field, boolean value) {",
      "    public Ole set(String field, int value) {",
      "    public Ole set(String field, double value) {",
      "    public Ole set(String field, String value) {",
      "    public Ole set(String field, JsonArray value) {",
      "    public Ole set(String field, Ole value) {",
      "    public boolean isEncrypted() {",
      "    public Ole onEncryption(Cryptor myc) {",
      "    public Ole offEncryption() {",
      "    public Ole loadFile(String fullfilename) {",
      "    public final String getField(String field) {",
      "    public final boolean getBoolean(String field) {",
      "    public final int getInt(String field) {",
      "    public final double getDouble(String field) {",
      "    public final String getString(String field) {",
      "    public final ArrayList getArray(String field) {",
      "    public final Ole setField(String fieldname, String value) {",
      "    public final Ole setField(String fieldname, int value) {",
      "    public final Ole setField(String fieldname, double value) {",
      "    public final Ole setField(String fieldname, boolean value) {",
      "    public final Ole setField(String fieldname, ArrayList<Object> value) {",
      "    public final Ole setField(String fieldname, Ole value) {",
      "    public final Ole addToField(String fieldname, String v) {",
      "    public final Ole addToField(String fieldname, int v) {",
      "    public final Ole addToField(String fieldname, double v) {",
      "    public final Ole addToField(String fieldname, boolean v) {",
      "    public final Ole addToField(String fieldname, Ole v) {",
      "    public Ole setFieldGeneric(String field, Object s) {"
    ],
    "GMailer": [
      "    public void ServiceHandlerNOTIFICATION(ACLMessage msg) {",
      "    protected void sendGmail(String receiver, String subject, String body) {",
      "    protected void sendGmail(String receiver, String subject, String body, String filename) {",
      "    public void takeDown() {"
    ],
    "TeamController": [
      "    public void Execute() {",
      "    public void takeDown() {",
      "    public Status loadWorld() {",
      "    public Status processRequest(ACLMessage incoming) {",
      "    public Status processJoin(ACLMessage incoming) {",
      "    public Status processExecute(ACLMessage incoming) {",
      "    public Status processQuery(ACLMessage incoming) {",
      "    protected void updateXUIAgent(String agentname) {",
      "    protected void updateXUIGoals() {",
      "    public void processRegister(ACLMessage incoming) {"
    ],
    "MyPopup": [
      "    protected void paintComponent(Graphics g) {",
      "    public void addText(String t) {",
      "    public Color getBg() {",
      "    public void setBg(Color bg) {",
      "    public Color getFg() {",
      "    public void setFg(Color fg) {"
    ],
    "Cryptor": [
      "   public Cryptor(String cs, String k) {",
      "   public void setCryptoKey(String k) {",
      "   public String getCryptoKey() {",
      "   public String getCharSet() {",
      "   public void setCharSet(String s) {",
      "   public String enCrypt(String text) {",
      "    public String deCrypt(String text) {",
      "    public String enCryptAES(String text) {",
      "    public String deCryptAES(String text) {",
      "    public String enCrypt64(String text) {",
      "    public String deCrypt64(String text) {"
    ],
    "LARVAEphemeral": [
      "            protected void onTick() {",
      "    public void unTick() {",
      "    public void takeDown() {"
    ],
    "Map2DColor": [
      "    public Map2DColor(int width, int height) {",
      "    public Map2DColor(int width, int height, int level) {",
      "    public Map2DColor(int width, int height, Color c) {",
      "    public Map2DColor loadMapNormalize(String filename) throws IOException {",
      "    public Map2DColor loadMapRaw(String filename) throws IOException {",
      "    public  Map2DColor shiftLeft(int pix) {",
      "    protected Map2DColor normalize() {",
      "    protected Color applyAlphaLevel(Color c) {",
      "    public int correctAlphaLevel(int level) {",
      "    public Map2DColor saveMap(String filename) throws IOException {",
      "    public int getWidth() {",
      "    public BufferedImage getMap() {",
      "    public int getHeight() {",
      "    public int getMinHeight() {",
      "    public int getMaxHeight() {",
      "    public int getRawLevel(int x, int y) {",
      "    public int getStepLevel(int x, int y) {",
      "    public Color getColor(int x, int y) {",
      "    public int getStepLevel(double x, double y) {",
      "    public Map2DColor setLevel(int x, int y, int level) {",
      "    public Map2DColor setColor(int x, int y, Color c) {",
      "    public Map2DColor setLevel(double x, double y, int level) {",
      "    public boolean hasMap() {",
      "    private void getExtremeHeights() {"
    ],
    "SentenceBuilder": [
      "    public SentenceBuilder clear() {",
      "    public SentenceBuilder Op(SQLOP o) {",
      "    public SentenceBuilder Table(String t) {",
      "    public SentenceBuilder Column(String column) {",
      "    public SentenceBuilder Pair(String column, String value) {",
      "    public SentenceBuilder Condition(String column, String comp, String value) {",
      "    public String toString() {"
    ],
    "Vector": [
      "    public Vector(Point s, Point t) {",
      "    protected Vector update() {",
      "    public Vector setSource(Point s) {",
      "    public Vector setTarget(Point t) {",
      "    public Point getSource() {",
      "    public Point getTarget() {",
      "    public Vector canonical() {",
      "    public double modulo() {",
      "    public double moduloX() {",
      "    public double moduloY() {",
      "    public double moduloZ() {",
      "    public double angleXYTo(Vector other) {",
      "    public double angleXYTo(Point target) {",
      "    public double scalarProductTo(Vector other) {",
      "    public Vector scalar(double f) {",
      "    public String toString() {",
      "    public JsonArray toJson() {",
      "    public Vector fromJson(JsonArray p) {",
      "    public Vector to2D() {",
      "    public Vector clone() {"
    ],
    "Thing": [
      "    public Thing(String name, World w) {",
      "    public Thing setType(String c) {",
      "    public String getType() {",
      "    public World getWorld() {",
      "    public Thing setSurface(Map2DColor cartography) {",
      "    public Map2DColor getSurface() {",
      "    public int getEnergy() {",
      "    public  int getOnTarget(){",
      "    public int getAlive(){",
      "    public int getPayload(){",
      "    public Thing placeAtSurface(Point p) {",
      "    public Thing addSensor(Perceptor p) {",
      "    public JsonObject readPerceptions() {",
      "    public int sizePerceptions() {",
      "    public JsonObject toJson() {",
      "    public String toString() {"
    ],
    "LARVAQueen": [
      "    protected String doProgressBar(int n, int total, int length, String done, String undone) {",
      "    public void Execute() {",
      "    public void ServiceHandlerADMIN(ACLMessage msg) {",
      "    public void takeDown() {"
    ],
    "Roles": [
      
    ],
    "LARVADash": [
      "    public boolean preProcessACLM(ACLMessage msg) {",
      "    protected boolean setWorldMap(String olefile, int maxlevel, String spalette) {",
      "    public void feedPerception(String perception) {",
      "    protected void feedPerceptionLocal(String perception) {",
      "    protected void whenExecute(Consumer<String> executor) {",
      "    protected void goSimulator() {",
      "    protected void goReal() {",
      "    public void initGUI() {",
      "            public void windowClosing(WindowEvent e) {",
      "    protected void preLayout() {",
      "    protected void fullLayout() {",
      "    protected void initLayout() {",
      "    protected void DashListener(ActionEvent e) {",
      "    protected void showTerrain(Graphics2D g, int px, int py) {",
      "    protected void showMyStatus(Graphics2D g) {",
      "    protected void CompactLayout(Graphics2D g) {",
      "    protected void DashBoardLayout(Graphics2D g) {",
      "    protected void addAction(String action) {",
      "    protected void addStatus(String status) {",
      "    public boolean hasSensor(String sensor) {",
      "    protected void refresh() {",
      "    protected void showName(Graphics2D g, int px, int py) {",
      "    protected void showAlive(Graphics2D g, int px, int py) {",
      "    protected void showOnTarget(Graphics2D g, int px, int py) {",
      "    protected void showEnergy(Graphics2D g, int px, int py) {",
      "    protected void showEnergyPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showAngularPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompassPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompass(Graphics2D g, int px, int py) {",
      "    protected void showAltimeter(Graphics2D g, int px, int py) {",
      "    protected void showAltimeterPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showNSteps(Graphics2D g, int px, int py) {",
      "    protected void showAngular(Graphics2D g, int px, int py) {",
      "    protected void showDistance(Graphics2D g, int px, int py) {",
      "    protected void showDistancePB(Graphics2D g, int px, int py, int w) {",
      "    protected void showPayLoad(Graphics2D g, int px, int py) {",
      "    protected void showGPS(Graphics2D g, int px, int py) {",
      "    protected void showTimer(Graphics2D g, int px, int py) {",
      "    protected void showMiniVisual(Graphics2D g, int px, int py) {",
      "    protected void showMiniLidar(Graphics2D g, int px, int py) {",
      "    protected void showMiniThermal(Graphics2D g, int px, int py) {",
      "    protected double[] fromJsonArray(JsonArray jsa) {",
      "    public boolean isTooHigh(int level) {",
      "    public boolean isNullread(int level) {",
      "    public int getNsteps() {",
      "    public int getTimerSecs() {",
      "    public int getMaxlevel() {",
      "    public String getStatus() {",
      "    public boolean getAlive() {",
      "    public boolean getOnTarget() {",
      "    public double[] getGPS() {",
      "    public int getPayload() {",
      "    public int getEnergyBurnt() {",
      "    public int getCompass() {",
      "    public int getAltitude() {",
      "    public double getDistance() {",
      "    public double getDistance(Point p) {",
      "    public double getAngular() {",
      "    public double getAngular(Point p) {",
      "    public double getEnergy() {",
      "    public int[][] getVisual() {",
      "    public int[][] getLidar() {",
      "    public int[][] getThermal() {",
      "    public int getMapLevel(int x, int y) {",
      "    public String getName() {",
      "    public String[] getCargo() {",
      "    protected Palette getPalette(String name) {",
      "    protected String doReadPerceptions() {",
      "    protected void doExecute(String action) {",
      "    public boolean isOpen() {",
      "    protected void disableDashBoard() {",
      "    public boolean isActivated() {",
      "    public void setActivated(boolean activated) {",
      "    public String getMyMission() {",
      "    public void setMyMission(String myMission) {",
      "    public String printSensors() {",
      "    public int getWidth() {",
      "    public int getHeight() {"
    ],
    "Compass": [
      "    public static String getName(direction d) {",
      "    public static int getAngle(direction d) {",
      "    public static Vector getVector(direction d) {"
    ],
    "Line3D": [
      "    public Object3D setEnd(Point end) {",
      "    public Line3D(Point start, Point end) {"
    ],
    "Object3D": [
      "    public void setPosition(Point position) {",
      "    public Color getColor() {",
      "    public Object3D setColor(Color color) {",
      "    public Object3D(Point position, Color color) {",
      "    public Object3D() {",
      "    public String getName() {",
      "    public Object3D setName(String name) {",
      "    public Point getCenter() {",
      "    public Object3D setCenter(Point center) {",
      "    public int compareTo(Object3D other) {",
      "    public int compare(Object3D one, Object3D other) {"
    ],
    "SequenceDiagram": [
      "    public int size() {",
      "    public int getNPlayers() {",
      "    public void addPlayer(String name) {",
      "    public String getPlayer(int i) {",
      "    public int indexPlayer(String name) {",
      "    public void nextLine() {",
      "    public void printPlayers() {",
      "    public String fillField(String base, char fill) {",
      "    public void printEmptyPlayers() {",
      "    public void printDate(Sequence s) {",
      "    public void printContent(Sequence s) {",
      "    public void printRW(Sequence s) {",
      "    public void printIRT(Sequence s) {",
      "    public void printPerformative(Sequence s) {",
      "    public void printArrow(Sequence s) {",
      "    public void getSequenceDiagram(String filename, String agentname) {",
      "    public void addSequence(String sender, String receiver, String content) {",
      "    public void addSequence(ACLMessage msg) {",
      "    public String printSequenceDiagram() {"
    ],
    "FactoryAgent": [
      "    public ArrayList<String> getAllAgentNames() {",
      "    public ArrayList<String> getAllContainerNames() {",
      "    public String getMainContainerName() {",
      "    public boolean createContainer(String containername) {",
      "    public boolean birthAgent(String agentname, Class c, String parameters[]) {",
      "    public boolean birthAgent(String agentname, Class c, String parameters[], String containername) {",
      "    public boolean killAgent(String agentname) {",
      "    public boolean killContainer(String containername) {",
      "    public boolean killAllAgents() {",
      "    public boolean killAllContainers() {",
      "    public String purgeAgents() {",
      "    public void killAllExit() {",
      "    public String defReportType() {",
      "    public String[] defReportableObjectList() {",
      "    public String reportObjectStatus(String objectid) {"
    ],
    "Game": [
      "    public void resize() {",
      "    public void refresh() {",
      "    public void drawScene(Graphics2D g) {",
      "    public int getSpeed() {",
      "    public void setSpeed(int speed) {",
      "    public int getZoom() {",
      "    public void setZoom(int zoom) {",
      "    public void zoomIn() {",
      "    public void zoomOut() {",
      "    public void delay(long milis) {",
      "    public void GameListener(ActionEvent e) {",
      "    public void GameKeyListener(KeyEvent e) {",
      "    /* synchronized*/ public void addEvent(GameEvent e) {",
      "    /* synchronized*/ public boolean hasEvent() {",
      "    /* synchronized*/ public boolean waitEvent() {",
      "    /* synchronized*/ public void waitReturn() {",
      "    /* synchronized*/ public String nextEvent() {",
      "    public String getId() {",
      "    public void setId(String id) {",
      "    public void addGameObject(GameObject go) {",
      "    public void clearAllGameObjects() {",
      "    public void moveRight(String id, double distance) {",
      "    public void moveLeft(String id, double distance) {",
      "    public void moveCellRight(String id) {",
      "    public void moveCellLeft(String id) {",
      "    public void moveCellUp(String id) {",
      "    public void moveCellDown(String id) {",
      "    public void moveUp(String id, double distance) {",
      "    public void moveDown(String id, double distance) {",
      "    public void changeSprite(String id, String sprite) {",
      "    public void setCellX(String id, int cellx) {",
      "    public void setCellY(String id, int celly) {",
      "    public int getCellX(String id) {",
      "    public int getCellY(String id) {",
      "    public GameScene getScene() {",
      "    public void setScene(GameScene scene) {",
      "    public boolean Confirm(String message) {",
      "    public void Alert(String message) {",
      "    public String inputLine(String message, String value) {",
      "    public int inputInt(String message, int value) {",
      "    public double inputDouble(String message, double value) {",
      "    public String inputSelect(String message, String[] options, String value) {",
      "    public void closeGame() {"
    ],
    "MyMapPalPane": [
      "            public void mouseWheelMoved(MouseWheelEvent e) {",
      "            public void mouseClicked(MouseEvent e) {",
      "            public void mousePressed(MouseEvent e) {",
      "            public void mouseReleased(MouseEvent e) {",
      "            public void mouseEntered(MouseEvent e) {",
      "            public void mouseExited(MouseEvent e) {",
      "    public void setPreferredSize(Dimension d) {",
      "    public void addRuler() {",
      "    public void addTrail() {",
      "    public void addShadow(int s) {",
      "    public void addHotSpot() {",
      "    public Graphics2D getMapGraphics() {",
      "    public void setImage(ImageIcon i, int x, int y) {",
      "    public void setTrail(int x, int y, int z) {",
      "    public void setBounds(int x, int y, int w, int h) {",
      "    protected void defLayout() {",
      "    public MyMapPalPane setMap(Color m[][], Palette p) {",
      "    protected void paintPalette(Graphics2D g) {",
      "    protected void paintMap(Graphics2D g) {",
      "    protected void paintTrail(Graphics2D g) {",
      "    protected void paintTrailPos(Graphics2D g, int pos) {",
      "    protected void paintPoint(Graphics2D g, Point p, Color c) {",
      "    protected void framePoint(Graphics2D g, Point p, Color c) {",
      "    protected void hideTrailPos(Graphics2D g, int pos) {",
      "    protected void hidePoint(Graphics2D g, Point p) {",
      "    protected void preDecorateMap(Graphics2D g) {",
      "    protected void postDecorateMap(Graphics2D g) {",
      "    public void setColor(int x, int y, Color c) {",
      "    public Color getColor(int x, int y) {",
      "    public Color[][] getMap() {",
      "    public int getMapWidth() {",
      "    public int getMapHeight() {"
    ],
    "ProblemManager": [
      "    public void Execute() {",
      "    protected void processInternal(ACLMessage incoming) {",
      "    protected void processRequests(ACLMessage incoming) {",
      "    protected void doOpenProblem(ACLMessage incoming) {",
      "    protected void doCancelProblem(ACLMessage incoming) {",
      "    public boolean doOpenSession(ACLMessage incoming) {",
      "    public void doForcedCloseSession(String sessionID) {",
      "    public boolean doCloseSession(String sessionKey) {",
      "    public void purgeSessions() {",
      "    public void takeDown() {"
    ],
    "TelegramMenuOption": [
      "    public TelegramMenuOption(Consumer <TelegramChoice> handler) {",
      "    public TelegramMenuOption() {",
      "    public boolean isExit() {"
    ],
    "TimeHandler": [
      "    public TimeHandler() {",
      "    public TimeHandler(long l) {",
      "    public TimeHandler plusSeconds(long s) {",
      "    public TimeHandler minusSeconds(long s) {",
      "    public TimeHandler(String stime) {",
      "    public boolean isAfterEq(TimeHandler t) {",
      "    public boolean isBeforeEq(TimeHandler t) {",
      "    public boolean isEqual(TimeHandler t) {",
      "    public long elapsedTimeSecs(TimeHandler other) {",
      "    public long elapsedTimeSecs() {",
      "    public String toString() {",
      "    public String toString(TimeHandler other) {"
    ],
    "AGDrawPane": [
      "    public void paintComponent(Graphics g) {",
      "    public void activate(Graphics g) {",
      "    public Color getBackground() {",
      "    public void setBackground(Color background) {",
      "    public Color getForeground() {",
      "    public void setForeground(Color foreground) {",
      "    public void clear() {",
      "    abstract public void AGDraw(Graphics2D g);"
    ],
    "DataBaser": [
      "    public void Execute() {",
      "    public void takeDown() {"
    ],
    "LARVABaseTelegram": [
      "    public void Scheduler(TelegramChoice c) {",
      "    public void Scheduler2(TelegramChoice c) {",
      "    public void takeDown() {",
      "    public abstract void sayHello();",
      "    public abstract void sayGoodBye();",
      "    public void doResumeWork() {",
      "    public final void Execute() {",
      "    protected void processTelegramCallBack(long cid, Update u) {",
      "    protected void processIncomingTelegram(long cid, Update u) {",
      "    protected String getSubscriptions(long cid) {",
      "    protected void euroVote(TelegramChoice c) {",
      "    protected void selectGroup(TelegramChoice c) {",
      "    protected void toggleNotification(TelegramChoice c) {",
      "    protected void processTelegramCommand(long cid, Update u) {",
      "    protected void processIncomingACLM(ACLMessage aclu) {",
      "    protected abstract String getBotName();",
      "    protected abstract String getBotToken();",
      "    public void ServiceHandlerNOTIFICATION(ACLMessage msg) {",
      "    protected void startTelegram() {",
      "    protected void endTelegram() {",
      "    protected void sendTelegram(long cid, String what) {",
      "    protected final void sendTelegram(long cid, String what, TelegramMenu menu) {",
      "    protected final void sendTelegramPhoto(long cid, String what, String filename, TelegramMenu menu) {",
      "    protected void doInformOK(long cid, String what) {",
      "    protected void doInformERROR(long cid, String what) {",
      "    protected void doCleanHelloWorld(TelegramChoice c) {",
      "    protected void doSubscribe(TelegramChoice c) {",
      "    protected void doCancel(TelegramChoice c) {",
      "    protected void doBannedAgents(TelegramChoice c) {",
      "    protected void doGetPassport(TelegramChoice c) {",
      "    protected void doAnalytics(TelegramChoice c) {",
      "    protected String doAnalyticsClass(TelegramChoice c) {",
      "    protected String doAnalyticsMe(TelegramChoice c) {",
      "    protected String doAnalyticsSummary(int userID) {",
      "    protected String doShortAnalyticsSummary(int userID) {",
      "    protected String doAnalyticsProblem(TelegramChoice c) {",
      "    protected String doAnalyticsProblemUser(TelegramChoice c) {",
      "    public void ShowMyGroup(TelegramChoice c) {",
      "    public void ShowGroup(TelegramChoice c) {",
      "    public void ShowOldGroup(TelegramChoice c) {",
      "    public void doShowAgents(TelegramChoice c) {",
      "    protected void doHelp(TelegramChoice c) {",
      "    protected String showMilestone(String milestoneID) {",
      "    protected String showProblem(String problemName) {",
      "    protected String showAssignment(String assignmentName) {",
      "    protected String showAssignmentSummary(String assignmentName) {",
      "    protected String showAllAssignments() {",
      "    protected void checkAgentDiagnostic() throws Exception {",
      "    protected void doDiagnoseLARVA(long cid, String command) {",
      "    protected void doCheckConnection(TelegramChoice c) {",
      "    protected void doCheckStatus(TelegramChoice c) {",
      "    protected void doCheckServices(TelegramChoice c) {",
      "    protected void doCheckReport(TelegramChoice c) {",
      "    protected boolean storePassport(long cid, Update u) {",
      "            this.doInformERROR(cid, \"This is a private chat. This operation is not allowed.\");",
      "    public String showProgressDetail(OleList total, OleList done) {",
      "    protected String under(String text) {",
      "    protected String bold(String text) {",
      "    protected String italic(String text) {",
      "    protected String mono(String text) {",
      "    protected String tab() {",
      "    public boolean amILocal() {",
      "    protected void TelegramException(long cid, String what, Exception ex) {",
      "    protected boolean isTelegramException() {",
      "    protected int getExceptions() {",
      "    protected void addException() {",
      "    protected void resetException() {",
      "    protected int limitException() {",
      "    protected int getTimeOutException() {",
      "    protected boolean cancelException() {",
      "    protected boolean checkExceptions(String what) {"
    ],
    "MyDrawPane": [
      "    public void setPainter(Consumer<Graphics2D> function) {",
      "    public void paintComponent(Graphics g) {"
    ],
    "LARVABoot": [
      "    protected void initGUI() {",
      "    protected void refreshGUI() {",
      "    public LARVABoot Boot(String host, int port) {",
      "    public LARVABoot Boot() {",
      "    protected LARVABoot doCompleted(String task) {",
      "    protected boolean isCompleted(String task) {",
      "    protected LARVABoot processArguments() {",
      "    protected LARVABoot Configure() {",
      "    protected LARVABoot setupJadeConnection(String host, int port) {",
      "    protected LARVABoot setupMicroJadeConnection(String host, int port) {",
      "    protected LARVABoot selectConnection(String host, int port) {",
      "    protected LARVABoot selectConnection() {",
      "    public LARVABoot launchAgent(String name, Class c) {",
      "    protected LARVABoot Progress() {",
      "    protected void Info(String s) {",
      "    protected void Error(String s) {",
      "    protected void Exception(Exception ex) {",
      "    public LARVABoot WaitToClose() {",
      "    protected LARVABoot Close() {",
      "    public LARVABoot ShutDown() {",
      "    public LARVABoot WaitToShutDown() {",
      "    protected void turnOff(ContainerController container) {",
      "    protected void doSwingLater(Runnable what) {",
      "    protected void doSwingWait(Runnable what) {",
      "    protected void jadebootListener(ActionEvent e) {",
      "    public void Alert(String message) {",
      "    public String inputLine(String message) {",
      "    public String inputSelect(String message, String[] options, String value) {",
      "    public boolean Confirm(String message) {",
      "    protected boolean isJade() {",
      "    protected boolean isMicroBoot() {",
      "    public boolean isShutDown() {",
      "    public boolean isEmpty() {",
      "    protected void Abort(String s) {",
      "    protected void Exit() {",
      "    protected boolean isBehindRouter() {",
      "    public JFrame getMyFrame() {",
      "    public JScrollPane getMyPane() {",
      "    protected JTextArea getMessages() {",
      "    protected boolean isDebug() {",
      "    protected void setDebug(boolean _debug) {",
      "    protected String clearMarkDowns(String original) {"
    ],
    "AGFrame": [
      
    ],
    "Logger": [
      "    public String getLoggerFileName() {",
      "    public Logger setOwner(String name) {",
      "    public Logger setOwnerQualifier(String s) {",
      "    public Logger setLoggerFileName(String fname) {",
      "    public Logger setOutputTo(PrintStream out) {",
      "    public Logger setTextColor(int color) {",
      "    public Logger onTabular() {",
      "    public Logger offTabular() {",
      "    public Logger onOverwrite() {",
      "    public Logger onAppend() {",
      "    public Logger setEcho(boolean e) {",
      "    public Logger onEcho() {",
      "    public Logger offEcho() {",
      "    public boolean isEcho() {",
      "    protected boolean initRecord(String filename) {",
      "    protected JsonObject addRecord(JsonObject o) {",
      "    public JsonObject logMessage(String message) {",
      "    public JsonObject logMessage(JsonObject details) {",
      "    public JsonObject logError(String message) {",
      "    public JsonObject logError(JsonObject details) {",
      "    public JsonObject logException(Exception ex) {",
      "    protected String formatOutput(String s) {",
      "    public void incIndent() {",
      "    public void decIndent() {",
      "    protected void Output(String s) {",
      "    protected void Error(String s) {",
      "    public static String trimString(String original, int max) {",
      "    public String getLastlog() {"
    ],
    "GamePanel": [
      
    ],
    "LARVABaseAgent": [
      "    public void setup() {",
      "    public void takeDown() {",
      "    public void Execute() {",
      "    public ArrayList<String> DFGetProviderList() {",
      "    public ArrayList<String> DFGetServiceList() {",
      "    public ArrayList<String> DFGetAllProvidersOf(String service) {",
      "    public ArrayList<String> DFGetAllServicesProvidedBy(String agentName) {",
      "    public boolean DFHasService(String agentName, String service) {",
      "    public boolean DFSetMyServices(String[] services) {",
      "    public void DFRemoveAllMyServices() {",
      "    private boolean DFSetServices(String agentname, String services[]) {",
      "    private DFAgentDescription[] DFQueryAllServicesProvided(String agentname) {",
      "    private DFAgentDescription[] DFQueryAllProviders(String service) {",
      "    public boolean AMSIsConnected(String agentName) {",
      "    public ArrayList<String> AMSGetAllConnectedAgents() {",
      "    private AMSAgentDescription[] AMSQuery(String agentname) {",
      "    protected void Error(String message) {",
      "    protected void Info(String message) {",
      "    protected void Alert(String message) {",
      "    protected boolean Confirm(String message) {",
      "    protected String inputLine(String message) {",
      "    private void MinorException(Exception ex) {",
      "    protected void BehaviourDefaultSetup() {",
      "            public void action() {",
      "            public boolean done() {",
      "    public boolean isCheckedin() {",
      "    public void setCheckedin(boolean checkedin) {",
      "    public int getNCycles() {",
      "    public void setNcycles(int ncycles) {",
      "    public boolean isExit() {",
      "    public void setExit(boolean exit) {"
    ],
    "capability": [
      
    ],
    "Goku": [
      "    public void Execute() {",
      "    public void takeDown() {"
    ],
    "LARVAAirTrafficControlTiles": [
      "    public void setTitle(String title) {",
      "    public String getTitle() {",
      "    public void clear() {",
      "    public boolean setWorldMap(String olefile, int maxlevel, String spalette) {",
      "    public void feedGoals(String goals) {",
      "    public void feedPerception(String perception) {",
      "    public void initGUI() {",
      "            public void windowClosing(WindowEvent e) {",
      "    protected void DashListener(ActionEvent e) {",
      "    protected void refresh() {",
      "    protected void disableDashBoard() {",
      "    public boolean isActivated() {",
      "    public void setActivated(boolean activated) {",
      "    protected Palette getPalette(String name) {",
      "    public HashMap<String, LARVAEmbeddedDash> getDashboards() {",
      "    public int getWidth() {",
      "    public int getHeight() {"
    ],
    "LARVAPublicTelegram": [
      "    public void takeDown() {",
      "    protected String getBotName() {",
      "    protected String getBotToken() {",
      "    public void sayHello() {",
      "    public void sayGoodBye() {"
    ],
    "LARVAPrivateTelegram": [
      "    public void takeDown() {",
      "    protected void doShowStudents(TelegramChoice c) {",
      "    public void defineGroup(TelegramChoice c) {",
      "    protected String getBotName() {",
      "    protected String getBotToken() {",
      "    public void sayHello() {",
      "    public void sayGoodBye() {",
      "    public void shutDownNow(TelegramChoice c) {",
      "    public void reBootNow(TelegramChoice c) {",
      "    public void doResume(TelegramChoice c) {",
      "    protected void processIncomingTelegram(long cid, Update u) {",
      "            this.doInformERROR(cid, \"This is a private chat. This operation is not allowed.\");",
      "    public void doExceptions(TelegramChoice c) {",
      "    public void getAllPassports(TelegramChoice c) {",
      "    protected void doBroadcast(TelegramChoice c) {",
      "    protected void processTelegramCommand(long cid, Update u) {"
    ],
    "SonGoanda": [
      "    public void Execute() {",
      "    public void takeDown() {"
    ],
    "HWManager": [
      "    public void Execute() {",
      "    public void takeDown() {"
    ],
    "Menu": [
      "    public Menu(Console owner) {",
      "    public void Init() {",
      "    public int size() {",
      "    public Menu addOption(String option) {",
      "    public Menu addTitle(String t) {",
      "    public int chooseOption() {",
      "    public void showMenu() {",
      "    public void showFancyMenu() {"
    ],
    "TradeFederation": [
      
    ],
    "TelegramChat": [
      "    public void resetChat() {",
      "    public boolean isValidChat() {",
      "    public void setUserID(int userID) {",
      "    public void setGroupID(int groupID) {",
      "    public void setCourseID(int courseID) {",
      "    public void setUsername(String username) {",
      "    public void setGroupname(String groupname) {",
      "    public void setTeacher(boolean teacher) {",
      "    public void setSubscribed(boolean subscribed) {",
      "    public boolean isTeacher() {",
      "    public boolean isSubscribed() {",
      "    public void setPendingUpdates(ArrayList<Update> pendingUpdates) {",
      "    public int getUserID() {",
      "    public int getGroupID() {",
      "    public int getCourseID() {",
      "    public String getUsername() {",
      "    public String getGroupname() {",
      "    public ArrayList<Update> getPendingUpdates() {"
    ],
    "DBAAPI": [
      
    ],
    "emojis": [
      "    public static String showProgressBar(int width, OleList total, OleList done, String color) {"
    ],
    "JDrawPane": [
      "    public void paintComponent(Graphics g) {"
    ],
    "MyPlainButton": [
      "    public MyPlainButton(String name, String image, LARVADialog myFrame) {",
      "    public MyPlainButton off() {",
      "    public MyPlainButton on() {"
    ],
    "Map2DGrayscale": [
      "    public Map2DGrayscale(int width, int height) {",
      "    public Map2DGrayscale(int width, int height, int level) {",
      "    public Map2DGrayscale(int width, int height, Color c) {",
      "    public Map2DGrayscale loadMap(String filename) throws IOException {",
      "    public Map2DGrayscale saveMap(String filename) throws IOException {",
      "    public int getWidth() {",
      "    public BufferedImage getMap() {",
      "    public int getHeight() {",
      "    public int getMinHeight() {",
      "    public int getMaxHeight() {",
      "    public int getLevel(int x, int y) {",
      "    public int getLevel(double x, double y) {",
      "    public Map2DGrayscale setLevel(int x, int y, int level) {",
      "    public Map2DGrayscale setColor(int x, int y, Color c) {",
      "    public Map2DGrayscale setLevel(double x, double y, int level) {",
      "    public boolean hasMap() {",
      "    private void getExtremeHeights() {"
    ],
    "OleTable": [
      "    public OleTable(Ole o) {",
      "    public boolean isEmpty() {",
      "    public OleTable(ResultSet rs) {",
      "    private void InitTable() {",
      "    public JsonArray rawRows(){",
      "    private void initRows() {",
      "    public OleTable addRow(Ole o) {",
      "    public Ole getRow(int r) {",
      "    public Ole getRow(String field, int value) {",
      "    public Ole getRow(String field, String value) {",
      "    public ArrayList<Ole> getAllRows() {",
      "    public ArrayList<Ole> getAllRows(String field, String value) {",
      "    public ArrayList<Ole> getAllRows(String field, int value) {",
      "    public OleTable getAllRowsOleTable(String field, String value) {",
      "    public OleTable getAllRowsOleTable(String field, int value) {",
      "    public int size() {",
      "    public String prettyprint() {"
    ],
    "DrDiagnostic": [
      "    public void Execute() {",
      "    public void doLauchQueries(AdminDiagnostic d) {",
      "    public void takeDown() {",
      "    public void ServiceHandlerADMIN(ACLMessage msg) {",
      "    public void PeriodicCheckSetup() {",
      "                protected void onTick() {",
      "    protected void findRoles() {"
    ],
    "LARVATelegramBot": [
      "    public String getBotUsername() {",
      "    public String getBotToken() {",
      "    public void onUpdateReceived(Update update) {",
      "        if (privateDBA) {"
    ],
    "TelegramChoice": [
      
    ],
    "TelegramMenu": [
      "    public TelegramMenu setDescription(String d) {",
      "    public TelegramMenu setColumns(int nc) {",
      "   public TelegramMenu addButton(String text){",
      "   public String getName() {",
      "    public TelegramMenu setName(String name) {",
      "   public String getDescription() {",
      "   public ReplyKeyboardMarkup getKeyboard(){"
    ],
    "Keygen": [
      "    public static String getHexaKey() {",
      "    public static String getAlphaNumKey(int length) {",
      "    public static String getWordo(int length) {",
      "    public static String getHexaKey(int length) {",
      "    private void initCode(String input) {",
      "    public Keygen() {",
      "    public Keygen(String input) {",
      "    public Keygen rotateLeft(int n) {",
      "    public Keygen rotateRight(int n) {",
      "    public Keygen lock() {",
      "    public Keygen unlock() {",
      "    public Keygen setOffset(boolean o) {",
      "    public boolean belongs(String word) {",
      "    public Keygen encode(String w) throws Exception {",
      "    public String decode() {",
      "    public Keygen recode(Keygen other) {",
      "    public BigInteger getCanonical() {"
    ],
    "DBA2021": [
      "    public DBA2021 cacheTables() {",
      "    public int DBGetAgentID(String agentName) {",
      "    public int DBGetProblemID(String problemName) {",
      "    public String DBGetProblemMilestones(int problemID) {",
      "    public Ole DBGetAssignment(int assignmentID) {",
      "    public Ole DBGetProblem(int problemID) {",
      "    public Ole DBGetUser(int userID) {",
      "    public Ole DBGetAllUsersCID(long cid) {",
      "    public Ole DBGetGroup(int groupID) {",
      "    public Ole DBGetUserGroup(int userID) {",
      "    public OleTable DBGetUserFellows(int groupID) {",
      "    public String DBGetProgressByUserID(int userID, int problemID) {",
      "    public String DBGetProgressByGroupID(int groupID, int problemID) {",
      "    public OlePassport DBGetPassport(int userID) {",
      "    public Ole DBGetUserCredentials(int userID) {",
      "    public void DBUpdateChatUserID(int userID, String cid) {",
      "    public boolean DBIsSubscribedCID(long cid) {",
      "    public ArrayList<Long> DBGetAllSubscribedCid() {",
      "    public boolean DBIsUserIDSubscribedTo(int userID, String token) {",
      "    public void DBOpenSession(int userID, int agentID, int problemID, String sessionID) {",
      "    public void DBCloseSession(String sessionID) {",
      "    public OleTable DBGetOpenSessions() {",
      "    public OleTable DBGetSession(String sessionID) {",
      "    public boolean DBIsSessionOpen(String sessionID) {",
      "    public void DBDoBanAgent(String agentname, String bannedUntil) {",
      "    public void DBDoCheckInAgent(String agentname, int userID) {",
      "    public void DBDoCheckInAgent(String agentname, int userID, String container) {",
      "    public void DBDoCheckOutAgent(String agentname) {",
      "    public int DBIsCheckedInAgent(String agentname) {",
      "    public int DBWhoCheckedInAgent(String agentname) {",
      "    public String DBBannedUntilAgent(String agentname) {",
      "    public OleTable DBGetAllAgents() {",
      "    public OleTable DBGetAllBannedAgents() {",
      "    public OleTable DBGetAllExceptions() {",
      "    public void DBAddException(String agentName, String title, String description) {",
      "    public void DBClearExceptions() {"
    ],
    "fileutils": [
      "    public static boolean JsonToFile(JsonObject filejson, String outputfolder) {",
      "    public static String[] listFiles(String folder, String extension) {",
      "            public boolean accept(File dir, String name) {"
    ],
    "Event": [
      
    ],
    "ProductCoin": [
      
    ],
    "LARVACompactDash": [
      "    public boolean preProcessACLM(ACLMessage msg) {",
      "    protected void whenExecute(Consumer<String> executor) {",
      "    protected void goSimulator() {",
      "    protected void goReal() {",
      "    public void initGUI() {",
      "            public void windowClosing(WindowEvent e) {",
      "    protected void preLayout() {",
      "    protected void fullLayout() {",
      "    protected void initLayout() {",
      "    protected void DashListener(ActionEvent e) {",
      "    protected void showTerrain(Graphics2D g, int px, int py) {",
      "    protected void showMyStatus(Graphics2D g) {",
      "    protected void CompactLayout(Graphics2D g) {",
      "    protected void DashBoardLayout(Graphics2D g) {"
    ],
    "Transform": [
      "    public static List<Ole> toArrayListOle(JsonArray jsa) {",
      "    public static List<Double> toArrayListDouble(JsonArray jsa) {",
      "    public static List<String> toArrayListString(JsonArray jsa) {",
      "    public static List<Object> toArrayList(JsonArray jsa) {",
      "    public static List<Object> toArrayList(Object o[]) {",
      "    public static String[] toArray(ArrayList<String> al) {",
      "    public static ArrayList<String> getAllNames(Class<? extends Enum<?>> e) {",
      "    protected <E extends Enum<E>> E getEnum(E myenum, String value) {"
    ],
    "GameBitmap": [
      "    public void loadBitmap(String folder, String filename) {",
      "    public void showGameObject(GameScene gs) {",
      "    public int getWidth() {",
      "    public void setWidth(int width) {",
      "    public int getHeight() {",
      "    public void setHeight(int height) {"
    ],
    "DeathStarDeLuxe": [
      "    public void Execute() {",
      "    public void takeDown() {",
      "    public Status MyCheckin() {",
      "    public Status MyCheckout() {",
      "    public Status myIdle() {",
      "    protected void setTitle() {"
    ],
    "LARVAEmbeddedDash": [
      "    protected boolean setWorldMap(String olefile, int maxlevel, String spalette) {",
      "    public void feedPerception(String perception) {",
      "    protected void feedPerceptionLocal(String perception) {",
      "    public void initGUI() {",
      "    protected void showMyStatus(Graphics2D g) {",
      "    protected void DashBoardLayout(Graphics2D g) {",
      "    protected void refresh() {",
      "    protected void showName(Graphics2D g, int px, int py) {",
      "    protected void showCargo(Graphics2D g, int px, int py) {",
      "    protected void showAlive(Graphics2D g, int px, int py) {",
      "    protected void showOnTarget(Graphics2D g, int px, int py) {",
      "    protected void showEnergy(Graphics2D g, int px, int py) {",
      "    protected void showEnergyPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showAngularPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompassPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompass(Graphics2D g, int px, int py) {",
      "    protected void showAltimeter(Graphics2D g, int px, int py) {",
      "    protected void showAltimeterPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showNSteps(Graphics2D g, int px, int py) {",
      "    protected void showAngular(Graphics2D g, int px, int py) {",
      "    protected void showDistance(Graphics2D g, int px, int py) {",
      "    protected void showDistancePB(Graphics2D g, int px, int py, int w) {",
      "    protected void showPayLoad(Graphics2D g, int px, int py) {",
      "    protected void showGPS(Graphics2D g, int px, int py) {",
      "    protected void showTimer(Graphics2D g, int px, int py) {",
      "    protected double[] fromJsonArray(JsonArray jsa) {",
      "    public boolean isTooHigh(int level) {",
      "    public boolean isNullread(int level) {",
      "    public int getNsteps() {",
      "    public int getTimerSecs() {",
      "    public int getMaxlevel() {",
      "    public String getStatus() {",
      "    public boolean getAlive() {",
      "    public boolean getOnTarget() {",
      "    public double[] getGPS() {",
      "    public int getPayload() {",
      "    public int getEnergyBurnt() {",
      "    public int getCompass() {",
      "    public int getAltitude() {",
      "    public double getDistance() {",
      "    public double getAngular() {",
      "    public double getEnergy() {",
      "    public int[][] getVisual() {",
      "    public int[][] getLidar() {",
      "    public int[][] getThermal() {",
      "    public String getName() {",
      "    public String printSensors() {",
      "    public String getMyCommitment() {"
    ],
    "OleDialog": [
      "    protected static String doSelectFolder(String currentfolder) {",
      "    public OleDialog(JFrame parent, String title) {",
      "    public void actionPerformed(ActionEvent e) {",
      "    public boolean run(OleConfig o) {",
      "    public OleConfig getResult() {",
      "    protected JPanel addToLayout(String oid, Ole ocomponents) {",
      "    protected void Ole2Layout() {",
      "    protected void getFromLayout(Ole currentTab) {",
      "    protected void Layout2Ole() {"
    ],
    "IdentityManager": [
      "            protected void onTick() {",
      "    public void Execute() {",
      "    public void takeDown() {",
      "    protected void doSubscribe(ACLMessage msg) {",
      "    protected void doCancel(ACLMessage msg) {",
      "    protected void purgeAgents() {"
    ],
    "WorldController": [
      "    public void Execute() {",
      "    public void takeDown() {",
      "    public Status loadWorld() {",
      "    public Status processRequest(ACLMessage incoming) {",
      "    public Status processJoin(ACLMessage incoming) {",
      "    public Status processExecute(ACLMessage incoming) {",
      "    public Status processQuery(ACLMessage incoming) {",
      "    protected void updateXUI(String agentname) {"
    ],
    "LARVAMiniDash": [
      "    public boolean preProcessACLM(ACLMessage msg) {",
      "    protected boolean setWorldMap(String olefile, int maxlevel, String spalette) {",
      "    public void feedPerception(String perception) {",
      "    protected void feedPerceptionLocal(String perception) {",
      "    public void initGUI() {",
      "            public void windowClosing(WindowEvent e) {",
      "    protected void preLayout() {",
      "    protected void initLayout() {",
      "    protected void DashListener(ActionEvent e) {",
      "    protected void showMyStatus(Graphics2D g) {",
      "    protected void DashBoardLayout(Graphics2D g) {",
      "    protected void refresh() {",
      "    protected void showName(Graphics2D g, int px, int py) {",
      "    protected void showAlive(Graphics2D g, int px, int py) {",
      "    protected void showOnTarget(Graphics2D g, int px, int py) {",
      "    protected void showEnergy(Graphics2D g, int px, int py) {",
      "    protected void showEnergyPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showAngularPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompassPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showCompass(Graphics2D g, int px, int py) {",
      "    protected void showAltimeter(Graphics2D g, int px, int py) {",
      "    protected void showAltimeterPB(Graphics2D g, int px, int py, int w) {",
      "    protected void showNSteps(Graphics2D g, int px, int py) {",
      "    protected void showAngular(Graphics2D g, int px, int py) {",
      "    protected void showDistance(Graphics2D g, int px, int py) {",
      "    protected void showDistancePB(Graphics2D g, int px, int py, int w) {",
      "    protected void showPayLoad(Graphics2D g, int px, int py) {",
      "    protected void showGPS(Graphics2D g, int px, int py) {",
      "    protected void showTimer(Graphics2D g, int px, int py) {",
      "    protected double[] fromJsonArray(JsonArray jsa) {",
      "    public boolean isTooHigh(int level) {",
      "    public boolean isNullread(int level) {",
      "    public int getNsteps() {",
      "    public int getTimerSecs() {",
      "    public int getMaxlevel() {",
      "    public String getStatus() {",
      "    public boolean getAlive() {",
      "    public boolean getOnTarget() {",
      "    public double[] getGPS() {",
      "    public int getPayload() {",
      "    public int getEnergyBurnt() {",
      "    public int getCompass() {",
      "    public int getAltitude() {",
      "    public double getDistance() {",
      "    public double getAngular() {",
      "    public double getEnergy() {",
      "    public int[][] getVisual() {",
      "    public int[][] getLidar() {",
      "    public int[][] getThermal() {",
      "    public String getName() {",
      "    protected String doReadPerceptions() {",
      "    public boolean isOpen() {",
      "    protected void disableDashBoard() {",
      "    public boolean isActivated() {",
      "    public void setActivated(boolean activated) {",
      "    public String printSensors() {"
    ],
    "LARVAFirstAgent": [
      "    protected boolean isSwing() {",
      "    protected void enableDeepLARVAMonitoring() {",
      "    protected String[] getConfiguredSensors() {",
      "    public void takeDown() {",
      "    protected void Error(String message) {",
      "    protected void Info(String message) {",
      "    public boolean loadMyPassport(String passportFileName) {",
      "    public void setMypassport(String mypassport) {",
      "    public String getMypassport() {",
      "    protected boolean doLARVACheckin() {",
      "    protected boolean doLARVACheckout() {",
      "    protected void LARVAsend(ACLMessage msg) {",
      "    protected ACLMessage LARVAblockingReceive() {",
      "    private ACLMessage LARVAblockingReceive(long milis) {",
      "    public ACLMessage LARVAblockingReceive(MessageTemplate t) {",
      "    protected ACLMessage LARVAblockingReceive(MessageTemplate t, long milis) {",
      "    private void checkReceivedMessage(ACLMessage res) {",
      "    protected boolean Confirm(String message) {",
      "    public void Alert(String message) {",
      "    protected String inputLine(String message) {",
      "    protected String inputSelect(String message, String[] options, String value) {",
      "    protected void refreshGUI() {",
      "    protected void doSwingLater(Runnable what) {",
      "    protected void doSwingWait(Runnable what) {",
      "    public void doActivateLARVADash() {",
      "    public String getIdentityManager() {",
      "    public void setIdentityManager(String IdentityManager) {",
      "    public ArrayList<String> DFGetProviderList() {",
      "    public ArrayList<String> DFGetServiceList() {",
      "    public ArrayList<String> DFGetAllProvidersOf(String service) {",
      "    public ArrayList<String> DFGetAllServicesProvidedBy(String agentName) {",
      "    public boolean DFHasService(String agentName, String service) {",
      "    private void addRunStep(String step) {",
      "    private String getSequenceDiagram() {",
      "    public void saveSequenceDiagram(String filename) {",
      "    public void getUserData(String welcome) {"
    ],
    "Scene3D": [
      "    public void addObject3D(Object3D o) {",
      "    public Object3D getObject(String name) {",
      "    public ArrayList<Object3D> getAllObjects(Point reference) {",
      "                public int compare(Object3D o1, Object3D o2) {",
      "    public int size() {",
      "    public Scene3D clearAll() {"
    ],
    "JADEBoot": [
      "    public JADEBoot(String[] args) {",
      "    protected void initBoot(String[] args) {",
      "    public JADEBoot Boot(String host, int port) {",
      "    public JADEBoot Boot() {",
      "    public JADEBoot Reboot() {",
      "    protected JADEBoot Progress() {",
      "    protected JADEBoot doCompleted(String task) {",
      "    protected boolean isCompleted(String task) {",
      "    protected JADEBoot processArguments() {",
      "    protected JADEBoot Configure() {",
      "    protected JADEBoot setupJadeConnection(String host, int port) {",
      "    protected JADEBoot setupMicroJadeConnection(String host, int port) {",
      "    protected JADEBoot selectConnection(String host, int port) {",
      "    protected JADEBoot selectConnection() {",
      "    public JADEBoot launchAgent(String name, Class c) {",
      "    public JADEBoot launchAgentContainer(String containerName, String agentName, Class c) {",
      "    public JADEBoot WaitToClose() {",
      "    public JADEBoot Close() {",
      "    public JADEBoot WaitAndShutDown() {",
      "    public JADEBoot ShutDown() {",
      "    protected void turnOff(ContainerController container) {",
      "    protected boolean isJade() {",
      "    protected boolean isMicroBoot() {",
      "    protected void Info(String s) {",
      "    protected void Error(String s) {",
      "    protected void Exception(Exception ex) {",
      "    protected void Abort(String s) {",
      "    protected void Exit() {",
      "    protected boolean isBehindRouter() {",
      "    public boolean activateLocks() {",
      "    public boolean isShutDown() {",
      "    public boolean isReboot() {",
      "    public boolean mustWait() {",
      "    public boolean deactivateLocks() {"
    ],
    "Polygon3D": [
      "    public Polygon3D(Point p) {",
      "    public Polygon3D addVertex(Point p) {",
      "    public boolean isFilled() {",
      "    public Polygon3D setFilled(boolean filled) {",
      "    public int size() {",
      "    public Point getVertex(int n) {"
    ],
    "World": [
      "    protected boolean filterReading(int x, int y, int range, int orientation) {",
      "    public String getSurfaceName() {",
      "    public void setSurfaceName(String surface) {",
      "    public String getName() {",
      "    public Point placeAtMap(String where, ArrayList<Double> pos) {",
      "    public String loadConfig(String worldconfigfilename) {",
      "    public OleConfig getConfig() {",
      "    public World setOntology(Ontology o) {",
      "    public Ontology getOntology() {",
      "    public World setEnvironment(String name) {",
      "    public Thing getEnvironment() {",
      "    public Thing addThing(Thing i, PROPERTY[] visible) {",
      "    public void removeThing(Thing i) {",
      "    public Thing addThing(String name, PROPERTY[] visible) {",
      "    public Thing addThing(String name, String type, PROPERTY[] visible) {",
      "    public Thing getThing(String id) {",
      "    public Thing getThingByName(String name) {",
      "    public boolean findThing(String id) {",
      "    public Set<String> listThings() {",
      "    public ArrayList<String> getAllThings(String type) {",
      "    public World addVisible(PROPERTY c, Thing t) {",
      "    public ArrayList<Thing> getDetectableList(Perceptor p) {",
      "    public JsonObject getPerception(Perceptor p) {",
      "    public String getSpalette() {"
    ],
    "Basher": [
      "    public Basher(String filename) throws FileNotFoundException, IOException {",
      "    public Basher(String line, String ignore) {",
      "    public Basher(Basher copy) {",
      "    public ArrayList<String> getList() {",
      "    public Basher grep(String search) {",
      "    public Basher grepr(String regexp) {",
      "    public Basher grepv(String search) {",
      "    public Basher sed(String regexp, String replace) {",
      "    public int wc() {",
      "    public Basher head(int n) {",
      "    public String isolateJsonKeyString(String key) {",
      "    public String toString() {"
    ],
    "Mario": [
      "    public void Execute() {",
      "    public void takeDown() {"
    ],
    "AdminPassport": [
      "    public AdminPassport(Ole o) {",
      "    public Ole loadEncryptedFile(String fullfilename) {",
      "    public int getUserID() {",
      "    public String getCid() {",
      "    public String getAlias() {",
      "    public String getEmail() {",
      "    public String getName() {",
      "    public boolean isEmpty() {"
    ],
    "AdminCryptor": [
      "    public AdminCryptor(String k) {",
      "    public String keyPradoEncode(int pradocode) {",
      "    public int keyPradoDecode(String pradocode) {",
      "    public String enCrypt(String text) {",
      "    public String deCrypt(String text) {"
    ],
    "ReportableObject": [
      "    public abstract String [] defReportableObjectList();",
      "    public abstract String reportObjectStatus(String objectid);"
    ],
    "TelegramMenuBar": [
      "    public TelegramMenu addMenu(String name) {",
      "    public TelegramMenu getMenu(String name) {",
      "    public TelegramMenuBar addOption(TelegramMenu m, String option, Consumer<TelegramChoice> r) {",
      "    public TelegramMenuBar addOption(TelegramMenu m, String option, TelegramMenu subm) {",
      "    public TelegramMenuBar addOption(TelegramMenu m, String option) {",
      "    public TelegramMenuOption getOption(String code) {",
      "    public TelegramMenu getRootMenu() {",
      "    public void setRootMenu(TelegramMenu rootMenu) {",
      "    public TelegramMenu getLastMenu(long cid) {",
      "    public void setLastMenu(long cid, TelegramMenu lastMenu) {",
      "    public boolean isMenu(String option) {",
      "    public boolean isOption(String option) {",
      "    public boolean isValidChoice(String option) {",
      "    public TelegramMenu processChoice(long cid, String c) {"
    ],
    "GameObject": [
      "    public GameObject(String id, int x, int y, int plane, int radius) {",
      "    public abstract void showGameObject(GameScene gs);",
      "    public String getId() {",
      "    public void setId(String id) {",
      "    public double getX() {",
      "    public void setX(double x) {",
      "    public double getY() {",
      "    public void setY(double y) {",
      "    public int getPlane() {",
      "    public void setPlane(int plane) {",
      "    public int getRadius() {",
      "    public void setRadius(int radius) {",
      "    public GameScene.Align getHorizontal() {",
      "    public void setHorizontal(GameScene.Align horizontal) {",
      "    public GameScene.Align getVertical() {",
      "    public void setVertical(GameScene.Align vertical) {"
    ],
    "GameCharacter": [
      "    public void showGameObject(GameScene gs) {",
      "    public String getCurrentFacet() {",
      "    public void setCurrentFacet(String currentFacet) {"
    ],
    "Bitmap3D": [
      
    ],
    "RoundProgressBar": [
      "    public RoundProgressBar setMaxValue(int vmax) {",
      "    public RoundProgressBar setUnits(String u) {",
      "    public RoundProgressBar setPreferredSize(int w) {",
      "    public RoundProgressBar setPosition(int x, int y) {",
      "    public RoundProgressBar setThick(int t) {",
      "    public RoundProgressBar setBackground(Color b) {",
      "    public RoundProgressBar setPanelbckgr(Color b) {",
      "    public RoundProgressBar setColor(Color b) {",
      "    public RoundProgressBar setValue(int v) {",
      "    public RoundProgressBar showProgressBar(Graphics2D g) {"
    ],
    "Sentence": [
      "    public String getSentence() {",
      "    public String getPastSentence() {",
      "    public String getFutureSentence() {",
      "    public String getCursorSentence() {",
      "    public Sentence parseSentence(String sentence) {",
      "    public boolean hasNext() {",
      "    public String next() {",
      "    public String next(int many) {",
      "    public boolean isNext(String tok) {",
      "    public boolean isNext(String tok1, String tok2) {",
      "    public boolean isNext(String tok1, String tok2, String tok3) {",
      "    public int size() {"
    ],
    "LARVA": [
      
    ],
    "DBAgent": [
      "    private DBAgent setDefault() {",
      "    public Ole get() {",
      "    public DBAgent set(Ole o) {",
      "    private DBAgent() {",
      "    public DBAgent clear() {"
    ],
    "OleFile": [
      "    public OleFile(Ole o) {",
      "    public OleFile loadFile(String fullfilename) {",
      "    public boolean saveFile(String outputfolder) {",
      "    public String getStringContent() {",
      "    public String getFileName() {"
    ],
    "LARVAAdminAgent": [
      "    public void takeDown() {",
      "    protected void doRebootNow() {",
      "    protected void doShutdownNow() {",
      "    protected void pressReturn() {",
      "    protected boolean AdminCheckSender(ACLMessage msg) {",
      "    public boolean AdminGiveBirth(FactoryAgent factory, String agentname, String containername, Class c, OleConfig config) {",
      "    public boolean AdminKill(FactoryAgent factory, String agentname) {",
      "    public void AdminConfirmBirth() {",
      "    public void AdminConfirmDeath(String replywith) {",
      "    protected OleReport ReportAgent() {",
      "    public void Notify(String what, ArrayList<Integer> UserIDs, String inReplyTo) {",
      "    public void NotifyReferee(String what){ ",
      "    public void NotifyTeacher(String what) {",
      "    public void NotifyClass(String what) {",
      "    public void NotifyUser(int userID, String what) {",
      "    protected void BehaviourDefaultSetup() {",
      "                public void action() {",
      "                public boolean done() {",
      "    public void BehaviourSplitSsetup(Processes t) {",
      "                public void action() {",
      "                public boolean done() {",
      "                public void action() {",
      "                public boolean done() {",
      "                public void action() {",
      "                public boolean done() {",
      "                public void action() {",
      "                public boolean done() {",
      "    public void ServiceHandlerRegular(ACLMessage msg) {",
      "    public void ServiceHandlerADMIN(ACLMessage msg) {",
      "    public void ServiceHandlerXUI(ACLMessage msg) {",
      "    public void ServiceHandlerNOTIFICATION(ACLMessage msg) {",
      "    public void SetupAdmin() {",
      "    protected void SetupLegacy() {",
      "    protected void PingSetup() {",
      "                protected void onTick() {",
      "    protected void DataBaseSetup() {",
      "                    protected void onTick() {",
      "    public void FactoryAgentSetup() {",
      "            protected void onTick() {",
      "    public void DataBaseClear() {",
      "    public void FactoryAgentClear() {",
      "    public void AdminProcessesClear() {",
      "    public void BehaviourDefaultClear() {",
      "    private void doValidateDB() {",
      "    protected ACLMessage pullACLM(MessageTemplate t) {",
      "    protected String colorMessage(String protocol, String message) {",
      "    protected void pushACLM(ACLMessage msg) {",
      "    protected String RespondError(ACLMessage msg, int performative, String details) {",
      "    protected String RespondSuccess(ACLMessage msg, int performative, String details) {",
      "    protected String RespondAdmin(ACLMessage msg, int performative, Ole details) {",
      "    protected void Error(String message) {",
      "    protected void Error(String message, Session s) {",
      "    protected void Info(String message) {",
      "    protected void Info(String message, Session s) {",
      "    protected void MinorException(Alerts a, String title, Exception ex) {",
      "    public void doShield(Runnable r) {",
      "    protected void MajorException(Alerts a, String title, Exception ex) {",
      "    protected void StatusAlert(Alerts category, String title, String alert) {",
      "    protected void StatusEmergencyMode(Alerts category, String title, String alert) {",
      "    protected void StatusSafeMode() {",
      "    public void StatusDisableSafeMode() {",
      "    public void StatusEnableSafeMode() {",
      "    public void StatusSet(AlertsLevel level, Alerts category, String alert) {",
      "    protected String encodeProduct(String product) {",
      "    protected String decodeProduct(String code) {",
      "    protected boolean tooManyRequests(ACLMessage incoming) {",
      "    protected boolean toGmailer(int userID, String subject, String body) {"
    ],
    "DBA2122": [
      "    public DBA2122 cacheTables() {",
      "    public int DBGetAgentID(String agentName) {",
      "    public int DBGetProblemID(String problemName) {",
      "    public int DBGetAsignmentID(String name) {",
      "    public Ole DBGetAssignment(int assignmentID) {",
      "    public Ole DBGetProblem(int problemID) {",
      "    public Ole DBGetMilestone(String milestoneID) {",
      "    public Ole DBGetUser(int userID) {",
      "    public void DBAddUser(int userID, String name, String email) {",
      "    public void DBFreeALias(String alias) {",
      "    public String DBGetFreeALias() {",
      "    public String DBAssignAlias(int userID) {",
      "    public int DBGetUserCourse(int userID) {",
      "    public Ole DBGetAllUsersCID(long cid) {",
      "    public Ole DBGetGroup(int groupID) {",
      "    public Ole DBGetUserGroup(int userID) {",
      "    public OleTable DBGetUserFellows(int groupID) {",
      "    public Ole DBGetCourse(int courseID) {",
      "    public void addUserToGroup (int userID, int groupID) {",
      "    public void clearGroup (int groupID) {",
      "    public void DBAddUserMilestone(int userID, int problemID, String milestoneID, String sessionID, String date) {",
      "    public void DBAddGroupMilestone(int userID, int problemID, String milestoneID, String sessionID, String date) {",
      "    public OleList DBGetProblemMilestones(int problemID) {",
      "    public OleList DBGetProblemUserMilestones(int userID, int problemID) {",
      "    public void DBCleanProblemUserMilestones(int userID, int problemID) {",
      "    public OleList DBGetProblemGroupMilestones(int groupID, int problemID) {",
      "    public OleList DBGetAssignmentMilestones(int assignmentID) {",
      "    public OleList DBGetCourseMilestones(int courseID) {",
      "    public OleList DBGetAssignmentUserMilestones(int userID, int assignmentID) {",
      "    public OleList DBGetCourseUserMilestones(int userID, int courseID) {",
      "    public OlePassport DBGetPassport(int userID) {",
      "    public Ole DBGetUserCredentials(int userID) {",
      "    public boolean DBHasUserNotifications(int userID, String noti) {",
      "    public OleList DBGetUserNotifications(int userID) {",
      "    public void DBActivateUserNotifications(int userID, String subscription) {",
      "    public void DBRemoveUserNotifications(int userID, String subscription) {",
      "    public void DBDeleteChatUserID(int userID) {",
      "    public void DBUpdateChatUserID(int userID, long cid) {",
      "    public boolean DBIsChatSubscribedTelegram(long cid) {",
      "    public ArrayList<Long> DBGetAllChatsSubscribedTelegram() {",
      "    public boolean DBIsUserSubscribedTelegram(int userID) {",
      "    public long DBGetUserCID(int userID) {",
      "    public void DBOpenSession(int userID, String agentName, int problemID, String sessionID) {",
      "    public void DBUpdateStatisticsSessionSession(String sessionID, OleQuery update) {",
      "    public void DBCloseSession(String sessionID) {",
      "    public OleTable DBGetOpenSessions() {",
      "    public OleTable DBGetSession(String sessionID) {",
      "    public OleTable DBGetUserSession(int userID) {",
      "    public boolean DBIsSessionOpen(String sessionID) {",
      "    public void DBDoBanAgent(String agentname, String bannedUntil) {",
      "    public void DBUndoBanAgent(String agentname) {",
      "    public boolean DBDoCheckInAgent(String agentname, int userID) {",
      "    public void DBDoCheckInAgent(String agentname, int userID, String container) {",
      "    public void DBDoCheckOutAgent(String agentname) {",
      "    public int DBIsCheckedInAgent(String agentname) {",
      "    public int DBWhoCheckedInAgent(String agentname) {",
      "    public String DBBannedUntilAgent(String agentname) {",
      "    public OleTable DBGetAllAgents() {",
      "    public OleTable DBGetAllBannedAgents() {",
      "    public OleTable DBGetAllExceptions() {",
      "    public void DBAddException(String agentName, String title, String description) {",
      "    public void DBClearExceptions() {"
    ],
    "ACLMessageTools": [
      "    public static JsonObject getJsonContentACLM(ACLMessage m) {",
      "    public static boolean isJsonString(String s) {",
      "    public static boolean isJsonACLM(ACLMessage m) {",
      "    public static JsonObject toJsonACLM(ACLMessage msg) {",
      "    public static String fancyWriteACLM(ACLMessage original, boolean simple) {",
      "    public static String fancyWriteACLM(ACLMessage original) {",
      "    public static String getDetailsLARVA(ACLMessage msg) {",
      "    public static ACLMessage respondTo(ACLMessage incoming) {",
      "    public static boolean isAnswerTo(ACLMessage incoming, ACLMessage sent) {",
      "    public static boolean isBadRecipient(ACLMessage msg) {",
      "    public static ACLMessage secureACLM(ACLMessage incoming) {",
      "    public static boolean isDashACL(ACLMessage msg) {",
      "    public static ACLMessage cleanDashMark(ACLMessage msg) {",
      "    public static ACLMessage addDashMark(ACLMessage msg) {",
      "    public static AID getMainReceiver(ACLMessage msg) {"
    ],
    "OleSensor": [
      "    public OleSensor(Ole o) {",
      "    public OleSensor setAllReadings(ArrayList<Double> values) {",
      "    public ArrayList<Double> getAllReadings() {",
      "    public String getSensorName() {",
      "    public OleSensor setSensorName(String name) {"
    ],
    "MyList": [
      "    public MyList init(Type t) {",
      "    public MyList addElement(String element) {",
      "    public MyList addAllElements(ArrayList<String> elements) {",
      "    public MyList removeElement(int pos) {",
      "    public MyList removeElement(String element) {",
      "    private int getIndex(String what) {",
      "    public DefaultListModel getListMode() {",
      "    public JScrollPane getPane() {",
      "    public JButton getAddButton() {",
      "    public JButton getRemoveButton() {",
      "    public void valueChanged(ListSelectionEvent e) {",
      "    public void actionPerformed(ActionEvent e) {"
    ],
    "String3D": [
      "    public String getContent() {",
      "    public void setContent(String content) {"
    ],
    "Internet": [
      "    public static String getLocalIPAddress() {",
      "    public static boolean isBehindRouter() {"
    ],
    "LARVAAirTrafficControl3D": [
      "    public void setTitle(String title) {",
      "    public String getTitle() {",
      "    public void clear() {",
      "    public boolean setWorldMap(String olefile, int maxlevel, String spalette) {",
      "    public void setMap(Color cmap[][], Palette p) {",
      "    public void setGoals(JsonObject jsgoals) {",
      "    public void addTrail(String ID, int x, int y, int z) {",
      "    public void feedGoals(String goals) {",
      "    public void feedPerception(String perception) {",
      "    public void initGUI() {",
      "            public void windowClosing(WindowEvent e) {",
      "    protected void DashListener(ActionEvent e) {",
      "    protected void refresh() {",
      "    protected void disableDashBoard() {",
      "    public boolean isActivated() {",
      "    public void setActivated(boolean activated) {",
      "    protected Palette getPalette(String name) {",
      "    public HashMap<String, LARVAEmbeddedDash> getDashboards() {",
      "    public int getWidth() {",
      "    public int getHeight() {"
    ],
    "OleDataBase": [
      "    public boolean defineConnection(String host, int port, String database, String user, String password) {",
      "    public boolean openConnection() {",
      "    public String getURL() {",
      "    public final void closeConnection() {",
      "    public void emergencyClose() {",
      "    public boolean isOpen() {",
      "    public boolean isError() {",
      "    public boolean canContinue() {",
      "    public void flushError() {",
      "    public void validationQuery() {",
      "    public void startCommit() throws SQLException {",
      "    public void endCommit() throws SQLException {",
      "    public void rollBack() {",
      "    public void openTransaction() {",
      "    public void closeTransaction() {",
      "    protected SentenceBuilder sentence(SQLOP o) {",
      "    protected OleTable DBSBquery(SentenceBuilder s) {",
      "    protected boolean DBSBupdate(SentenceBuilder s) {",
      "    protected boolean DBSBinsert(SentenceBuilder s) {",
      "    protected boolean DBSBdelete(SentenceBuilder s) {",
      "    public OleTable DBObjectQuery(String table, OleQuery oq) {",
      "    public boolean DBObjectDelete(String table, OleQuery oq) {",
      "    public boolean DBObjectUpdate(String table, OleQuery find, OleQuery update) {",
      "    public boolean DBObjectUpdateUnique(String table, OleQuery find, OleQuery update) {",
      "    public OleTable DBquery(String sentence) {",
      "    public boolean DBupdate(String sentence) {",
      "    public boolean DBinsert(String sentence) {",
      "    public boolean DBdelete(String sentence) {",
      "    public boolean isEmpty() {",
      "    protected ResultSet getResult() {",
      "    protected OleTable getOleTable() {",
      "    public void loadSchema() {",
      "    public ArrayList<String> getTableList() {",
      "    public ArrayList<String> getColumnList(String tablename) {",
      "    public String getColumnType(String tablename, String columname) {",
      "        public boolean getORM() {",
      "                of.println(\"public class \"+this._database+\" {\");",
      "                of.println(\"public OleDataBase db;\");",
      "                    of.println(\"public OleTable \"+table+\"GetRow(OleQuery oq) {\");",
      "                    of.println(\"public OleTable \"+table+\"GetRow(String field, String value) {\");",
      "    public String[] errorLog() {",
      "    public void reportException(Exception Ex) {",
      "    public void reportError(String which) {",
      "    public String defReportType() {",
      "    public String[] defReportableObjectList() {",
      "    public String reportObjectStatus(String objectid) {"
    ],
    "liveBot": [
      "    public liveBot(String name, World w) {",
      "    public boolean isAtBase() {",
      "    public JsonObject toJson() {",
      "    public void fromJson(JsonObject update) {",
      "    public String toString() {",
      "    public int getEnergy() {",
      "    public int getOnTarget() {",
      "    public int getAlive() {",
      "    public int getPayload() {",
      "    public ArrayList<Thing> getAllPayload() {",
      "    public void addPayload(Thing what) {",
      "    public String getStatus() {",
      "    public void setStatus(String s) {",
      "    public JsonArray getFullPayload() {",
      "    public Point getPosition() {",
      "    public int getEnergyBurnt() {",
      "    public void addEnergyBurnt(int increment) {",
      "    public int getNumSteps() {",
      "    public void addNumSteps(int increment) {",
      "    public Roles getRole() {",
      "    public void setRole(Roles role) {",
      "    public ArrayList<String> getCapabilities() {",
      "    public void addCapabilities(String capability) {",
      "    public ArrayList<String> getAttachments() {",
      "    public void addAttachments(String attachment) {",
      "    public ArrayList<Thing> getThePayload() {",
      "    public void addThePayload(Thing capture) {",
      "    public int getEnergylevel() {",
      "    public void setEnergylevel(int energylevel) {",
      "    public void burnEnergylevel(int increment) {",
      "    public int getBurnmovement() {",
      "    public void setBurnmovement(int burnmovement) {",
      "    public int getBurnsensor() {",
      "    public void setBurnsensor(int burnsensor) {",
      "    public int getMinAllowedLevel() {",
      "    public void setMinAllowedLevel(int minAllowedLevel) {",
      "    public int getMaxAllowedLevel() {",
      "    public void setMaxAllowedLevel(int maxAllowedLevel) {",
      "    public int getRange() {",
      "    public void setRange(int range) {",
      "    public int getAltitude() {",
      "    public void setAltitude(int altitude) {",
      "    public int getInitialDistance() {",
      "    public void setInitialDistance(int initialDistance) {",
      "    public int getCurrentDistance() {",
      "    public void setCurrentDistance(int currentDistance) {",
      "    public String getMyCommitment() {",
      "    public void setMyCommitment(String myCommitment) {"
    ],
    "Palette": [
      "    protected void debugPing(String message) {",
      "    public Palette() {",
      "    public int size() {",
      "    public Palette addWayPoint(int perc, Color c) {",
      "    public Palette fillWayPoints(int nlevels) {",
      "    public Palette intoTerrain(int nlevels) {",
      "    public Palette intoBW(int nlevels) {",
      "    public Palette intoBWInv(int nlevels) {",
      "    public Color getColor(int level) {",
      "    public int getLevel(Color c) {",
      "    public Palette intoThermal(int nlevels) {",
      "    protected Color getBWColor(int value, int minvalue, int maxvalue) { // Value [0,1], getcolor ANSICOLOR",
      "    protected Color getThermalColor(int value, int minvalue, int maxvalue) { // Value [0,1], getcolor ANSICOLOR",
      "    protected Color getTerrainColor(int value, int minvalue, int maxvalue) { // Value [0,1], getcolor ANSICOLOR",
      "    public Color inverse(int level) {",
      "    public String toString() {",
      "    public Palette fromString(String spalette) {",
      "    public WayPoint(int p, Color c) {"
    ],
    "request": [
      
    ],
    "Ontology": [
      "    public Ontology add(String type, String subtype) {",
      "    public boolean isType(String c) {",
      "    public String getRootType() {",
      "    public String getType(String c) {",
      "    public boolean isSubTypeOf(String subtype, String type) {",
      "    public boolean matchTypes(String first, String second) {",
      "    public JsonObject toJson() {",
      "    public String toString() {"
    ],
    "LARVAFrame": [
      "    public LARVAFrame(String title, Consumer<ActionEvent> listener) {",
      "    public LARVAFrame() {",
      "    public void setListener(Consumer<ActionEvent> listener) {",
      "    public void setKeyListener(Consumer<KeyEvent> myKeyListener) {",
      "    public void actionPerformed(ActionEvent e) {",
      "    public void closeLARVAFrame() {",
      "    public void keyTyped(KeyEvent e) {",
      "    public void keyPressed(KeyEvent e) {",
      "    public void keyReleased(KeyEvent e) {"
    ],
    "TokenList": [
      "    public static int countTokens(String tokenlist) {",
      "    public static String getToken(String tokenlist, int index) {",
      "    public static String addToken(String tokenlist, String token) {",
      "    public static String removeToken(String tokenlist, String token) {",
      "    public static String missingTokens(String partial, String total) {"
    ],
    "TelegramUpdates": [
      "    public void initChatID(long cid) {",
      "    public Set<Long> getAllChatIDRegistered() {",
      "    protected synchronized boolean isEmptyChatID(long chatID) {",
      "    public synchronized boolean isEmptyUserID(int userID) {",
      "    public synchronized boolean isAllEmpty() {",
      "    public long getChatIDUser(int userID) {",
      "    public List<Long> getAllChatIDActive() {",
      "    public List<Long> getAllChatIDGroup(int groupID) {",
      "    protected ArrayList<Update> getChatIDPendingUpdates(long chatID) {",
      "    protected ArrayList<Update> getUserIDPendingUpdates(int userID) {",
      "    public synchronized void pushUpdate(Update update) {",
      "    public synchronized Update popUpdateChatID(long chatID) {",
      "    public synchronized Update popUpdateUserID(int userID) {",
      "    public TelegramChat getChatData(long cid) {"
    ],
    "OleList": [
      "    public OleList(Ole o) {",
      "    protected JsonArray getList() {",
      "    public int size() {",
      "    public String getItem(int i) {",
      "    public OleList addUniqueItem(String item) {",
      "    public OleList addUniqueItem(String[] items) {",
      "    public OleList addDupItem(String[] items) {",
      "    public OleList addDupItem(String item) {",
      "    public OleList removeItem(String item) {",
      "    public OleList removeALlItems(String item) {",
      "    public boolean findItem(String item) {",
      "    public OleList getIntersection(OleList other) {",
      "    public OleList getUnion(OleList other) {",
      "    public OleList getConcatenation(OleList other) {",
      "    public OleList getDifference(OleList other) {",
      "    public String prettyprint() {"
    ],
    "Angular": [
      "    public Angular setPreferredSize(int w) {",
      "    public Angular setPosition(int x, int y) {",
      "    public Angular setThick(int t) {",
      "    public Angular setBackground(Color b) {",
      "    public Angular setColor(Color b) {",
      "    public Angular setValue(int v) {",
      "    public Angular showAngle(Graphics2D g) {"
    ],
    "OleDot": [
      "    public OleDot(Ole o) {",
      "    public void toDot(String dotfilename) {",
      "    public void recursiveTree(Ole classname, PrintStream output) {"
    ],
    "StoreManager": [
      "    public void Execute() {",
      "    public void processRequest(ACLMessage incoming) {",
      "    protected void supplyStore() {",
      "    protected void buyProduct(ACLMessage incoming, String product) {",
      "    protected void shoppingList(ACLMessage incoming) {",
      "    public void takeDown() {"
    ],
    "DeathStar": [
      "    public void Execute() {",
      "    public void takeDown() {",
      "    public Status MyCheckin() {",
      "    public Status MyCheckout() {",
      "    public Status myIdle() {",
      "    protected void setTitle() {"
    ],
    "OlePassport": [
      "    public OlePassport(Ole o) {",
      "    private final void InitPassport() {"
    ],
    "Console": [
      "    public static final int black = defColor(0, 0, 0),",
      "    public Console(String title) {",
      "    public Console(String title, int rows, int columns) {",
      "    public Console(String title, int rows, int columns, int fontsize) {",
      "    public Console(String title, String json) {",
      "    public Process openExternalConsole(String title, int columns, int rows, int fontsize) {",
      "    public Process openExternalConsoleArial(String title, int columns, int rows, int fontsize) {",
      "    public Process openInternalConsole(String title) {",
      "    public Process linkExternalConsole(String json) {",
      "    public Console print(String s) {",
      "    public Console println(String s) {",
      "    public String readLine() {",
      "    public int readInt() {",
      "    public double readDouble() {",
      "    public void waitToClose() {",
      "    public void close() {",
      "    public PrintStream out() {",
      "    public String tty() {",
      "    public InputStream in() {",
      "    public Console captureStdInOut() {",
      "    public Console resetStdInOut() {",
      "    public String toJson() {",
      "    public String toString() {",
      "    public int getWidth() {",
      "    public int getHeight() {",
      "    public static int defColor(double r, double g, double b) {",
      "    public static int negColor(double r, double g, double b) {",
      "    public static int negColor(int color) {",
      "    public static String defJsonColor(double r, double g, double b) {",
      "    public static double getRed(int color) {",
      "    public static double getGreen(int color) {",
      "    public static double getBlue(int color) {",
      "    public int getText() {",
      "    public int getBackground() {",
      "    public Console resetColors() {",
      "    public Console setBackground(int color) {",
      "    public static String defBackground(int color) {",
      "    public Console setText(int color) {",
      "    public static String defText(int color) {",
      "    public static String defclearScreen() {",
      "    public Console clearScreen() {",
      "    public static String defCursorXY(int x, int y) {",
      "    public Console setCursorXY(int x, int y) {",
      "    public Console setCursorOn() {",
      "    public Console setCursorOff() {",
      "    public Console doRectangle(int x, int y, int w, int h) {",
      "    public Console doRectangleFrame(int x, int y, int w, int h) {",
      "    public Console doFrame(int x, int y, int x2, int y2) {",
      "    public Console doGrid(int x, int y, int x2, int y2) {",
      "    public Console doFrameTitle(String title, int x, int y, int w, int h) {",
      "    public Console doProgressBar(int x, int y, int width, double value, double max) {",
      "    public void printMinibar(int x, int y, int level, int front, int back) {",
      "    public void printHMinibar(int x, int y, double level, double maxlevel, int width, int front, int back) {",
      "    public Console printHRulerTop(int x, int y, int width, int each, int valmax) {",
      "    public Console printVRuler(int x, int y, int height, int each, int valmax) {",
      "    public void printGrid(int x, int y, int x2, int y2, int level) {",
      "    public Console printWRuler(int x, int y, int width, int height, int each, int hmax, int vmax) {",
      "    public char doMessage(String message, String allowed) {",
      "    public boolean doConfirm(String message) {",
      "    public void doPressReturn(String message) {",
      "    public Console doTextArea(int px, int py, int w, int h, ArrayList<String> lines) {",
      "    public Console doRadioColor(boolean radio) {"
    ],
    "EmptyAgent": [
      "    public void Execute() {",
      "    public void takeDown() { "
    ],
    "LARVADialog": [
      "    public void actionPerformed(ActionEvent e) {",
      "    public void closeLARVADialog() {"
    ],
    "direction": [
      
    ],
    "SwingTools": [
      "    public static void doSwingWait(Runnable what) {",
      "    public static ImageIcon toIcon(String image, int nw, int nh) {",
      "    public static void initLookAndFeel() {"
    ],
    "SensorDecoder": [
      "    public boolean setWorldMap(String content, int maxlevel) {",
      "    public int getMaxlevel() {",
      "    public void setMaxlevel(int maxlevel) {",
      "    public String getStatus() {",
      "    public String getSessionID() {",
      "    public void setSessionID(String sessionID) {",
      "    public Map2DColor getWorldMap() {",
      "    public boolean hasSensor(String sensorname) {",
      "    protected JsonArray getSensor(String sensorname) {",
      "    public void setSensor(String sensorname, JsonArray reading) {",
      "    public void clear() {",
      "    public boolean getAlive() {",
      "    public boolean getOnTarget() {",
      "    protected double[] fromJsonArray(JsonArray jsa) {",
      "    public boolean isReady() {",
      "    public double[] getGPS() {",
      "    public int getPayload() {",
      "    public int getCompass() {",
      "    public int getAltitude() {",
      "    public double getDistance() {",
      "    public double getAngular() {",
      "    public double getAngular(Point p) {",
      "    public double getEnergy() {",
      "    public double getEnergyBurnt() {",
      "    public String[] getTrace() {",
      "    public String[] getCargo() {",
      "    public int getNSteps() {",
      "    public int[][] getVisualData() {",
      "    public int[][] getLidarData() {",
      "    public int[][] getThermalData() {",
      "    public JsonObject toJson() {",
      "    public Ole toOle() {",
      "    public void fromJson(JsonArray jsareading) {",
      "    public void fromOle(ArrayList<Ole> oreading) {",
      "    public String getName() {",
      "    public String getSession() {",
      "    public void feedPerception(String content) {",
      "    public String getCommitment() {",
      "    public void setCommitment(String commitment) {",
      "    public String [] getSensorList() {"
    ],
    "Sprite": [
      "    public boolean isValid() {",
      "    public Sprite(String folder, String name) {",
      "    public final boolean spLoad(String folder, String name) {",
      "    public int spWidth() {",
      "    public int spHeight() {",
      "    public Image getSprite() {"
    ],
    "AG3DDrawPane": [
      "            public void mouseClicked(MouseEvent e) {",
      "            public void mousePressed(MouseEvent e) {",
      "            public void mouseReleased(MouseEvent e) {",
      "            public void mouseEntered(MouseEvent e) {",
      "            public void mouseExited(MouseEvent e) {",
      "            public void mouseWheelMoved(MouseWheelEvent e) {",
      "    protected void setDefaults() {",
      "    public void activate(Graphics g) {",
      "    protected Point calculate3D(double x, double y, double z) {",
      "    protected Point calculate3D(Point p3d) {",
      "    public void SetPuertoVision(int xi, int yi, int xf, int yf, int resx, int resy) {",
      "    public void SetPosicionEncuadre(double camx, double camy) {",
      "    protected void calculateCamera() {",
      "    public double getCamelevation() {",
      "    public double getCamdeviation() {",
      "    public double getCamrotation() {",
      "    public double getCamdistance() {",
      "    public void setCamelevation(double camelevation) {",
      "    public void setCamdeviation(double camdeviation) {",
      "    public void setCamrotation(double camrotation) {",
      "    public void setCamdistance(double camdistance) {",
      "    public void moveTo(int x, int y) {",
      "    public void lineTo(int x, int y) {",
      "    public void AG2DLine(Point p1, Point p2) {",
      "    public void AG2DLine(int x1, int y1, int x2, int y2) {",
      "    public void setCamPosition(double x, double y, double z, double rrotacion) {",
      "    public double getCamX() {",
      "    public double getCamY() {",
      "    public double getCamZ() {",
      "    public void SetPerspectiva(double p) {",
      "    public void MoverA(double x, double y, double z) {",
      "    public void LineaA(double x, double y, double z) {",
      "    public void drawLine3D(Point p1, Point p2) {",
      "    public void draw3D(Object3D o3d) {",
      "    public void clearScene3D() {",
      "    public void addObject3D(Object3D o) {",
      "    public void drawScene() {",
      "    public void Poligono(Point vertices[], boolean transparente) {",
      "    public void AGDraw(Graphics2D g) {"
    ],
    "SessionManager": [
      "    public void takeDown() {",
      "    protected void Introduction() {",
      "    protected void solvedProblem(String problemName) {",
      "    protected void Error(String message) {",
      "    protected void Info(String message) {",
      "    protected void addMilestone(String milestone) {"
    ],
    "Circle3D": [
      "    public String getContent() {",
      "    public Circle3D setContent(String content) {",
      "    public double getRadius() {",
      "    public Circle3D setRadius(double radius) {"
    ],
    "Point": [
      "    public Point(double x, double y, double z) {",
      "    public Point(double x, double y) {",
      "    public Point(double x) {",
      "    public Point(String spoint) {",
      "    public Point(Ole o) {",
      "    public double getX() {",
      "    public Point setX(double x) {",
      "    public double getY() {",
      "    public Point setY(double y) {",
      "    public double getZ() {",
      "    public Point setZ(double z) {",
      "    public int getDimension() {",
      "    public Point clear() {",
      "    public Point define(String key) {",
      "    private Point define(double x, double y, double z) {",
      "    private Point define(double x, double y) {",
      "    private Point define(double x) {",
      "    public double fastDistanceXYTo(Point p) {",
      "    public double realDistanceTo(Point p) {",
      "    public Point getOrigin() {",
      "    public boolean isEqualTo(Point p) {",
      "    public boolean isProjection(Point p) {",
      "    public Point plus(Point p) {",
      "    public Point plus(Vector v) {",
      "    public Point invert() {",
      "    public Point minus(Point p) {",
      "    public Point times(Point p) {",
      "    public Point scalar(double s) {",
      "    public double sum() {",
      "    public String toString() {",
      "    public JsonArray toJson() {",
      "    public Ole toOle() {",
      "    public Point fromJson(JsonArray jspa) {",
      "    public Point to3D() {",
      "    public Point to2D() {",
      "    public Point to1D() {",
      "    public Point clone() {",
      "    private int approx_distance(double ddx, double ddy) {",
      "    private double approx_distance2(Point other) {",
      "    public java.awt.Point getAWTPoint(){"
    ],
    "ADMINMessage": [
      "    public ADMINMessage(LARVAAdminAgent sender) {",
      "    protected final void init(LARVAAdminAgent sender) {",
      "    public void setJsonContent(JsonObject jso) {"
    ],
    "BehaviourControl": [
      "    public ArrayList<String> getAllBehaviourNames() {",
      "    public Behaviour getBehaviour(String name) {",
      "    public String registerBehaviour(Behaviour b, String name, String description) {",
      "    public String unregisterBehaviour(Behaviour b) {",
      "    public String unregisterBehaviour(String name) {",
      "    public int size() {",
      "    public boolean isEmpty() {",
      "    public long getLatency(String behaviourname){",
      "    public boolean isOK(String behaviourname) {",
      "    public void startBehaviour(Behaviour b) {",
      "    public void endBehaviour(Behaviour b) {",
      "    public String defReportType() {",
      "    public String[] defReportableObjectList() {",
      "    public String reportObjectStatus(String objectid) {"
    ],
    "SendGMailSMTP": [
      "    public SendGMailSMTP sendGMail(String receiver, String subject, String body) throws AddressException, MessagingException {",
      "            protected PasswordAuthentication getPasswordAuthentication() {",
      "    public SendGMailSMTP sendGMail(String receiver, String subject, String body, String filename) throws AddressException, MessagingException, IOException {",
      "            protected PasswordAuthentication getPasswordAuthentication() {"
    ],
    "Map2DPalette": [
      
    ],
    "sensors": [
      
    ],
    "Map2DColor_OLD": [
      "    public Map2DColor_OLD(int width, int height) {",
      "    public Map2DColor_OLD(int width, int height, int level) {",
      "    public Map2DColor_OLD(int width, int height, Color c) {",
      "    public Map2DColor_OLD loadMapRaw(String filename) throws IOException {",
      "    protected Color applyAlphaLevel(int level) {",
      "    public int correctAlphaLevel(int level) {",
      "    public Map2DColor_OLD saveMap(String filename) throws IOException {",
      "    public Map2DColor_OLD saveMapCorrected(String filename) throws IOException {",
      "    public int getWidth() {",
      "    public BufferedImage getMap2Draw() {",
      "    public BufferedImage getMap2Query() {",
      "    public int getHeight() {",
      "    public int getMinHeight() {",
      "    public int getMaxHeight() {",
      "    public int getLevel(int x, int y) {",
      "    public Color getColor(int x, int y) {",
      "    public int getLevel(double x, double y) {",
      "    public Map2DColor_OLD setLevel(int x, int y, int level) {",
      "    public Map2DColor_OLD setColor(int x, int y, Color c) {",
      "    public Map2DColor_OLD setLevel(double x, double y, int level) {",
      "    public boolean hasMap() {",
      "    private void getExtremeHeights() {"
    ],
    "Perceptor": [
      "    public String getName() {",
      "    public Thing getOwner() {",
      "    public PROPERTY getProperty() {",
      "    public String getType() {",
      "    public OPERATION getOperation() {",
      "    public ATTACH getAttachment() {",
      "    public SELECTION getSelection() {",
      "    public int getRange() {",
      "    public double getSensitivity() {",
      "    public Perceptor setWhatPerceives(PROPERTY property, String type, SELECTION select) {",
      "    public Perceptor setHowPerceives(OPERATION operation, int range) {",
      "    public Perceptor setAttacment(ATTACH attachment) {",
      "    public Perceptor setSensitivity(double s) {",
      "    public Perceptor setRange(int r) {",
      "    public Perceptor setType(String type) {",
      "    public JsonObject getReading() {"
    ],
    "GameScene": [
      "    public void addGameObject(GameObject go) {",
      "    public void remmoveGameObject(GameObject go) {",
      "    public void clear() {",
      "    public void showScene() {",
      "    public GameObject getGameObject(String id) {",
      "    public int getSpeed() {",
      "    public void setSpeed(int speed) {",
      "    public int getZoom() {",
      "    public void setZoom(int zoom) {",
      "    public int getStep() {",
      "    public void setStep(int step) {",
      "    public Graphics2D getG() {",
      "    public void setG(Graphics2D g) {",
      "    public int getCell() {",
      "    public void setCell(int cell) {"
    ],
    "AirTrafficControl": [
      "            public void mouseWheelMoved(MouseWheelEvent e) {",
      "            public void mouseClicked(MouseEvent e) {",
      "            public void mousePressed(MouseEvent e) {",
      "            public void mouseReleased(MouseEvent e) {",
      "            public void mouseEntered(MouseEvent e) {",
      "            public void mouseExited(MouseEvent e) {",
      "    public void setPreferredSize(Dimension d) {",
      "    public void addRuler() {",
      "    public void addTrail() {",
      "    public void addShadow(int s) {",
      "    public void addHotSpot() {",
      "    public Graphics2D getMapGraphics() {",
      "    public void setGoals(JsonObject jsgoals) {",
      "    public void addTrail(String ID, int x, int y, int z) {",
      "    public void setBounds(int x, int y, int w, int h) {",
      "    protected void defLayout() {",
      "    public AirTrafficControl setMap(Color m[][], Palette p) {",
      "    protected void paintPalette(Graphics2D g) {",
      "    protected void paintMap(Graphics2D g) {",
      "    protected void paintTrail(Graphics2D g, String ID) {",
      "    protected void paintHotSpots(Graphics2D g, String ID) {",
      "    protected void paintTrailPos(Graphics2D g, String ID, int pos) {",
      "    protected void paintGoal(Graphics2D g, JsonObject jsgoal) {",
      "    protected void paintPoint(Graphics2D g, Point p, Color c) {",
      "    protected void framePoint(Graphics2D g, Point p, Color c) {",
      "    protected void hideTrailPos(Graphics2D g, String ID, int pos) {",
      "    protected void hidePoint(Graphics2D g, Point p) {",
      "    protected void preDecorateMap(Graphics2D g) {",
      "    protected void postDecorateMap(Graphics2D g) {",
      "    public void setColor(int x, int y, Color c) {",
      "    public Color getColor(int x, int y) {",
      "    public Color[][] getMap() {",
      "    public int getMapWidth() {",
      "    public int getMapHeight() {",
      "    public ATC_Trail(String id, Color nc) {",
      "    public void pushTrail(Point p) {",
      "    public int size() {",
      "    public Point getPoint(int i) {"
    ],
    "OleConfig": [
      "    public OleConfig(Ole o) {",
      "    public Ole getProperties() {",
      "    public Ole getProperties(String sfield) {",
      "    public Ole getOptions() {",
      "    protected List<String> getTabList() {",
      "    public int numTabs() {",
      "    public List<String> getAllTabNames() {",
      "    public Ole getTab(String stab) {",
      "    public List<String> getAllTabFields(String stab) {"
    ],
    "OleReport": [
      "    private OleReport(Ole o) {",
      "    public OleReport(ReportableObject o) {",
      "    public String shortTextReport() {"
    ],
    "Session": [
      "    public Session(DBA2122 db) {",
      "    public String open() {",
      "    public void close() {",
      "    public final Session clear() {",
      "    public boolean isEmpty() {",
      "    public Ole toOle() {",
      "    public Session fromOle(Ole o) {",
      "    public Session setOwner(String agentName) {",
      "    public Session addGuest(String agentName) {",
      "    public World getWorld() {",
      "    public void setWorld(World world) {",
      "    public Session setContext(String problemName) {",
      "    public void setDatabase(DBA2122 database) {",
      "    public void setUserID(int userID) {",
      "    public void setProblemID(int problemID) {",
      "    public void setGroupID(int groupID) {",
      "    public void setAssignmentID(int assignmentID) {",
      "    public void setAgentID(int agentID) {",
      "    public void setIsIndividual(boolean isIndividual) {",
      "    public void setUserName(String userName) {",
      "    public void setAgentName(String agentName) {",
      "    public void setProblemName(String problemName) {",
      "    public void setGroupName(String groupName) {",
      "    public void setSessionID(String sessionID) {",
      "    public void setAssignmentName(String assignmentName) {",
      "    public void setControllerName(String controllerName) {",
      "    public void setProblemMilestones(OleList problemMilestones) {",
      "    public void setSessionMilestones(OleList sessionMilestones) {",
      "    public void setLastAction(String lastAction) {",
      "    public void setSessionLogger(Logger sessionLogger) {",
      "    public DBA2122 getDatabase() {",
      "    public int getUserID() {",
      "    public int getProblemID() {",
      "    public int getGroupID() {",
      "    public int getAssignmentID() {",
      "    public int getAgentID() {",
      "    public boolean getIsIndividual() {",
      "    public String getUserName() {",
      "    public String getAgentName() {",
      "    public String getProblemName() {",
      "    public String getGroupName() {",
      "    public String getSessionID() {",
      "    public String getAssignmentName() {",
      "    public String getControllerName() {",
      "    public OleList getProblemMilestones() {",
      "    public OleList getSessionMilestones() {",
      "    public String getLastAction() {",
      "    public Logger getSessionLogger() {",
      "    public ArrayList<Integer> getFellowsID() {",
      "    public String getContainerName() {",
      "    public void setContainerName(String containerName) {",
      "    public OleList getSessionMilestonesMissing() {",
      "    public void setSessionMilestonesMissing(OleList sessionMilestonesMissing) {",
      "    public OleList getAchievedMilestones() {",
      "    public void setAchievedMilestones(OleList achievedMilestones) {",
      "    public Map2DColor getMap() {",
      "    public void setMap(Map2DColor map) {",
      "    public liveBot registerAgent(String name, Roles rol, int basex, int basey, OleList attachments) {",
      "    public liveBot findAgent(String name) {",
      "    public void addTrace(String record) {",
      "    public boolean execAgent(liveBot agent, String action) {",
      "    public void checkStatus(liveBot agent) {",
      "    public String isGoal(liveBot agent) {",
      "    public JsonObject getGoals() {",
      "    public JsonObject readPerceptions(liveBot agent) {",
      "    public JsonObject getPerceptions(liveBot agent) {",
      "    public int getNumPayload() {",
      "    public int getNumSteps() {",
      "    public int getEnergyBurnt() {",
      "    public boolean hasDistances() {",
      "    public int getElapsedTime() {",
      "    public String getOpenDate() {",
      "    public void setOpenDate(String sthOpen) {",
      "    protected int getSensorRange(glossary.sensors name) {",
      "    protected int getBurnRatio(glossary.sensors name) {",
      "    public int getMaxVisibility(Roles rol) {",
      "    public int getRange(Roles rol) {",
      "    public int getMaxLevel(Roles r) {",
      "    public double getBurnRate(Roles rol) {",
      "    public int getWidth() {",
      "    public void setWidth(int width) {",
      "    public int getHeight() {",
      "    public void setHeight(int height) {",
      "    public int getMaxflight() {",
      "    public void setMaxflight(int maxflight) {",
      "    public boolean isSolved() {",
      "    public String getSessionAlias() {",
      "    public void setSessionAlias(String sessionAlias) {"
    ]
  },
  "class": {
    "appboot": [
      "LARVABoot",
      "JADEBoot"
    ],
    "sessions": [
      "Session"
    ],
    "data": [
      "OleQuery",
      "Ole",
      "OleTable",
      "AdminPassport",
      "OleFile",
      "OleSensor",
      "OleList",
      "OleDot",
      "OlePassport",
      "OleConfig",
      "OleReport"
    ],
    "telegram": [
      "LARVATelegramBot"
    ],
    "tools": [
      "emojis"
    ],
    "crypto": [
      "Cryptor",
      "AdminCryptor"
    ],
    "agents": [
      "LARVAEphemeral",
      "LARVABaseTelegram",
      "LARVABaseAgent",
      "TradeFederation",
      "DeathStarDeLuxe",
      "LARVAFirstAgent",
      "LARVAAdminAgent",
      "DeathStar",
      "ADMINMessage"
    ],
    "database": [
      "SentenceBuilder",
      "DBA2021",
      "DBA2122",
      "OleDataBase"
    ],
    "swing": [
      "LARVADash",
      "MyMapPalPane",
      "MyDrawPane",
      "LARVAAirTrafficControlTiles",
      "LARVACompactDash",
      "LARVAEmbeddedDash",
      "LARVAMiniDash",
      "LARVAAirTrafficControl3D",
      "AirTrafficControl"
    ],
    "world": [
      "Thing",
      "World",
      "liveBot",
      "Perceptor"
    ],
    "agswing": [
      "Line3D",
      "Object3D",
      "AGDrawPane",
      "Scene3D",
      "Polygon3D",
      "Bitmap3D",
      "AG3DDrawPane"
    ],
    "larva": [
      "GMailer",
      "TeamController",
      "LARVAQueen",
      "ProblemManager",
      "DataBaser",
      "Goku",
      "LARVAPublicTelegram",
      "LARVAPrivateTelegram",
      "SonGoanda",
      "HWManager",
      "DrDiagnostic",
      "IdentityManager",
      "WorldController",
      "Mario",
      "StoreManager",
      "SessionManager"
    ],
    "games": [
      "GameLabel",
      "Game",
      "GameBitmap",
      "GameObject",
      "GameCharacter",
      "GameScene"
    ],
    "factoryagent": [
      "FactoryAgent"
    ],
    "geometry": [
      "Entity"
    ]
  },
  "format": {
    "appboot": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Chartreuse",
      "color": "black"
    },
    "sessions": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "MediumSpringGreen",
      "color": "black"
    },
    "data": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Turquoise",
      "color": "black"
    },
    "telegram": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "CadetBlue",
      "color": "black"
    },
    "tools": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "MediumAquaMarine",
      "color": "black"
    },
    "crypto": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Thistle",
      "color": "black"
    },
    "agents": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "LightSteelBlue",
      "color": "black"
    },
    "database": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "DarkViolet",
      "color": "black"
    },
    "swing": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "BlueViolet",
      "color": "black"
    },
    "world": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "DarkOliveGreen",
      "color": "black"
    },
    "agswing": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Aqua",
      "color": "black"
    },
    "larva": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "OliveDrab",
      "color": "black"
    },
    "games": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Cyan",
      "color": "black"
    },
    "factoryagent": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "LightBlue",
      "color": "black"
    },
    "geometry": {
      "face": "Arial",
      "fontsize": 20,
      "fillcolor": "Indigo",
      "color": "black"
    },
    "extends": "[arrowhead=onormal,color=black]",
    "owns": "[style=dotted,arrowhead=odiamond,color=blue]"
  }
}